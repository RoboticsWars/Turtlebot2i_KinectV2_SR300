/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-03-23 12:37:02.174308
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x6);
x11=((0.11)*x4);
x12=((0.11)*x3);
x13=((0.104)*x4);
x14=((0.104)*x3);
x15=((1.0)*x7);
x16=((1.0)*x4);
x17=(x0*x1);
x18=(x0*x2);
x19=(x2*x5);
x20=(x1*x5);
x21=((1.0)*x2*x3);
eetrans[0]=((((0.104)*x18))+(((0.0325)*x17))+((x14*x17))+((x6*(((((-1.0)*x11*x17))+((x12*x18))))))+((x7*((((x11*x18))+((x12*x17))))))+((x13*x18)));
eetrans[1]=((((0.104)*x19))+((x6*(((((-1.0)*x11*x20))+((x12*x19))))))+(((0.0325)*x20))+((x7*((((x11*x19))+((x12*x20))))))+((x14*x20))+((x13*x19)));
IkReal x22=((1.0)*x2);
eetrans[2]=((0.047)+((x1*x13))+(((0.104)*x1))+(((-1.0)*x14*x22))+((x7*((((x1*x11))+(((-1.0)*x12*x22))))))+((x6*((((x1*x12))+((x11*x2))))))+(((-0.0325)*x2)));
eerot[0]=(((x5*x9))+(((-1.0)*x8*((((x10*((((x18*x4))+((x17*x3))))))+((x15*(((((-1.0)*x18*x3))+((x16*x17)))))))))));
eerot[1]=((((-1.0)*x8*((((x15*(((((-1.0)*x19*x3))+((x16*x20))))))+((x10*((((x19*x4))+((x20*x3))))))))))+(((-1.0)*x0*x9)));
eerot[2]=((-1.0)*x8*((((x10*((((x1*x4))+(((-1.0)*x21))))))+((x15*(((((-1.0)*x16*x2))+(((-1.0)*x1*x3)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.047)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x23=x24.value;
j0array[0]=((-1.0)*x23);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x23)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((0.101072299254784)*cj0*px*pz*(r02*r02)))+(((-14.9515235584)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((14.9515235584)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((0.0171725723830003)*cj0*px*r01*r02*sj0))+(((0.485924515648)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.0171725723830003)*pz*(r01*r01)*(sj0*sj0)))+(((0.485924515648)*sj0*(py*py*py)*(r01*r01)))+(((-1.5549584500736)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((0.006392944408994)*cj0*py*r00*r01))+(((4.6648753502208)*cj0*px*r01*r02*sj0*(py*py)))+(((-14.9515235584)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((3.1099169001472)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.0633626879000544)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.08256044414904)*(py*py)*(r02*r02)))+(((7.4757617792)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.177508225566214)*(py*py)*(r01*r01)))+(((6.2198338002944)*px*py*pz*r00*r01))+(((-1.5549584500736)*cj0*r00*r02*sj0*(py*py*py)))+(((-7.4757617792)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.00122297482098289)*cj0*r00*r02))+(((14.9515235584)*px*r00*r02*(pz*pz*pz)))+(((0.0791552346586144)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-7.4757617792)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-0.0053664288696876)*cj0*px*(r02*r02)))+(((-1.5549584500736)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.00045588845253548)*(r02*r02)))+(((14.9515235584)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.0343451447660006)*cj0*pz*r00*r01*sj0))+(((14.9515235584)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((14.9515235584)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-0.158310469317229)*py*pz*r01*r02*(sj0*sj0)))+(((-7.4757617792)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((0.158310469317229)*cj0*r00*r01*sj0*(pz*pz)))+(((0.0791552346586144)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((44.8545706752)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-14.9515235584)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((-7.4757617792)*(px*px)*(pz*pz)*(r02*r02)))+(((-7.4757617792)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.485924515648)*px*r00*r01*sj0*(pz*pz)))+(((0.0171725723830003)*cj0*py*r00*r02*sj0))+(((-14.9515235584)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-4.6648753502208)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((0.485924515648)*cj0*(px*px*px)*(r02*r02)))+(((0.485924515648)*cj0*px*(py*py)*(r02*r02)))+(((-14.9515235584)*pz*r00*r02*(px*px*px)))+(((1.457773546944)*px*r00*r01*sj0*(py*py)))+(((4.6648753502208)*cj0*py*r00*r02*sj0*(px*px)))+(((-14.9515235584)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.520137339430509)*px*pz*r00*r02))+(((1.5549584500736)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((1.5549584500736)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-14.9515235584)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.0633626879000544)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.006392944408994)*cj0*px*(r00*r00)))+(((-4.6648753502208)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((0.101072299254784)*cj0*py*pz*r00*r01))+(((3.1099169001472)*px*r00*r02*(py*py)*(sj0*sj0)))+(((29.9030471168)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((0.101072299254784)*py*pz*sj0*(r02*r02)))+(((3.1099169001472)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-14.9515235584)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.520137339430509)*py*pz*r01*r02))+(((-1.5549584500736)*px*r00*r02*(py*py)))+(((0.0633626879000544)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-14.9515235584)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.01579254675856)*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.0171725723830003)*px*r00*r02*(cj0*cj0)))+(((0.0171725723830003)*py*r01*r02*(sj0*sj0)))+(((-0.101072299254784)*cj0*r00*r02*(py*py)))+(((-0.126725375800109)*px*py*r00*r01*(sj0*sj0)))+(((14.9515235584)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00261956289051712)*cj0*r00*r01*sj0))+(((-7.4757617792)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.0117593732786816)*cj0*pz*r00*r02))+(((14.9515235584)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-4.6648753502208)*cj0*px*r01*r02*sj0*(pz*pz)))+(((44.8545706752)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((29.9030471168)*px*py*r00*r01*(pz*pz)))+(((-4.6648753502208)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.485924515648)*cj0*px*(py*py)*(r00*r00)))+(((-0.158310469317229)*px*pz*r00*r02*(cj0*cj0)))+(((7.4757617792)*(px*px)*(py*py)*(r02*r02)))+(((-14.9515235584)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((0.006392944408994)*px*r00*r01*sj0))+(((-0.126725375800109)*cj0*px*py*sj0*(r01*r01)))+(((-1.5549584500736)*pz*(px*px)*(r02*r02)))+(((-14.9515235584)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((3.7378808896)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((1.5549584500736)*r01*r02*(py*py*py)*(sj0*sj0)))+(((7.4757617792)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.0633626879000544)*(cj0*cj0)*(px*px)*(r00*r00)))+(((14.9515235584)*(py*py)*(pz*pz)*(r01*r01)))+(((14.9515235584)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-3.1099169001472)*px*py*pz*r00*r01*(sj0*sj0)))+(((3.1099169001472)*pz*(px*px)*(r00*r00)))+(((-3.1099169001472)*cj0*px*py*pz*sj0*(r01*r01)))+(((-7.4757617792)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.260068669715254)*(pz*pz)*(r02*r02)))+(((0.485924515648)*cj0*py*r00*r01*(pz*pz)))+(((0.177508225566214)*(px*px)*(r00*r00)))+(((14.9515235584)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((14.9515235584)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((3.7378808896)*(px*px*px*px)*(r02*r02)))+(((-0.126725375800109)*cj0*px*py*sj0*(r00*r00)))+(((-14.9515235584)*pz*r01*r02*(py*py*py)))+(((-0.158310469317229)*cj0*px*pz*r01*r02*sj0))+(((-1.5549584500736)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((3.1099169001472)*pz*(py*py)*(r01*r01)))+(((-0.971849031296)*cj0*pz*r00*r02*(py*py)))+(((-14.9515235584)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((1.5549584500736)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((3.7378808896)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((0.101072299254784)*px*pz*r00*r01*sj0))+(((-0.485924515648)*py*sj0*(px*px)*(r01*r01)))+(((1.457773546944)*cj0*py*r00*r01*(px*px)))+(((0.485924515648)*py*sj0*(pz*pz)*(r01*r01)))+(((-14.9515235584)*py*pz*r01*r02*(px*px)))+(((-1.5549584500736)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-14.9515235584)*px*pz*r00*r02*(py*py)))+(((0.971849031296)*cj0*px*(py*py)*(r01*r01)))+(((0.0204574221087808)*py*r01*r02))+(((4.6648753502208)*py*r01*r02*(pz*pz)))+(((0.101072299254784)*cj0*px*py*r01*r02))+(((1.5549584500736)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((3.7378808896)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((29.9030471168)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-3.1099169001472)*cj0*px*py*pz*sj0*(r00*r00)))+(((29.9030471168)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.485924515648)*sj0*(py*py*py)*(r02*r02)))+(((0.971849031296)*px*py*pz*r00*r02*sj0))+(((-14.9515235584)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((6.2198338002944)*cj0*px*py*pz*sj0*(r02*r02)))+(((-1.5549584500736)*r00*r02*(px*px*px)))+(((-0.485924515648)*cj0*r00*r01*(py*py*py)))+(((0.0117593732786816)*pz*r01*r02*sj0))+(((0.006392944408994)*py*sj0*(r01*r01)))+(((-0.126725375800109)*px*py*r00*r01*(cj0*cj0)))+(((-14.9515235584)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((-1.5549584500736)*py*r01*r02*(px*px)))+(((-0.971849031296)*pz*r01*r02*sj0*(px*px)))+(((14.9515235584)*py*r01*r02*(pz*pz*pz)))+(((44.8545706752)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.03158509351712)*cj0*px*py*sj0*(r02*r02)))+(((0.355016451132429)*px*py*r00*r01))+(((3.7378808896)*(py*py*py*py)*(r02*r02)))+(((14.9515235584)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((3.1099169001472)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-14.9515235584)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-0.0053664288696876)*py*sj0*(r02*r02)))+(((0.485924515648)*cj0*px*(pz*pz)*(r00*r00)))+(((1.5549584500736)*r00*r02*(cj0*cj0)*(px*px*px)))+(((3.7378808896)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.101072299254784)*cj0*px*pz*(r00*r00)))+(((3.7378808896)*(pz*pz*pz*pz)*(r02*r02)))+(((0.0204574221087808)*pz*(r02*r02)))+(((0.485924515648)*py*sj0*(px*px)*(r02*r02)))+(((0.00122297482098289)*r01*r02*sj0))+(((4.6648753502208)*px*r00*r02*(pz*pz)))+(((7.4757617792)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.971849031296)*cj0*px*py*pz*r01*r02))+(((-0.08256044414904)*(px*px)*(r02*r02)))+(((3.1099169001472)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((0.971849031296)*py*sj0*(px*px)*(r00*r00)))+(((-0.158310469317229)*cj0*py*pz*r00*r02*sj0))+(((-1.5549584500736)*cj0*r01*r02*sj0*(px*px*px)))+(((-14.9515235584)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.00130978144525856)*(cj0*cj0)*(r00*r00)))+(((3.7378808896)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.101072299254784)*r01*r02*sj0*(px*px)))+(((-0.00130978144525856)*(r01*r01)*(sj0*sj0)))+(((0.101072299254784)*px*py*r00*r02*sj0))+(((-1.5549584500736)*r01*r02*(py*py*py)))+(((-1.5549584500736)*pz*(py*py)*(r02*r02)))+(((0.01579254675856)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-7.4757617792)*(py*py)*(pz*pz)*(r02*r02)))+(((0.485924515648)*py*sj0*(pz*pz)*(r02*r02)))+(((0.101072299254784)*py*pz*sj0*(r01*r01)))+(((-0.0171725723830003)*pz*(cj0*cj0)*(r00*r00)))+(((-3.1099169001472)*px*py*pz*r00*r01*(cj0*cj0)))+(((14.9515235584)*(px*px)*(pz*pz)*(r00*r00)))+(((3.7378808896)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((0.0204574221087808)*px*r00*r02))+(((-14.9515235584)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((0.485924515648)*cj0*(px*px*px)*(r00*r00)))+(((1.5549584500736)*(pz*pz*pz)*(r02*r02)))+(((-0.485924515648)*r00*r01*sj0*(px*px*px))));
op[1]=((((0.971849031296)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.404289197019136)*cj0*py*pz*r00*r02*sj0))+(((-1.943698062592)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.971849031296)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.202144598509568)*(cj0*cj0)*(py*py)*(r00*r00)))+(((2.915547093888)*cj0*px*r01*r02*sj0*(py*py)))+(((0.0107328577393752)*py*r01*r02*(sj0*sj0)))+(((-0.404289197019136)*px*py*r00*r01*(sj0*sj0)))+(((-0.583692528196378)*px*pz*r00*r01*sj0))+(((2.915547093888)*py*r01*r02*(pz*pz)))+(((-0.0752599889835622)*pz*r01*r02*sj0))+(((-0.971849031296)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.00244594964196577)*(cj0*cj0)*(r00*r00)))+(((-3.1099169001472)*py*sj0*(px*px)*(r02*r02)))+(((6.2198338002944)*pz*r01*r02*sj0*(px*px)))+(((-2.915547093888)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.1099169001472)*py*sj0*(pz*pz)*(r01*r01)))+(((-0.00244594964196577)*(r01*r01)*(sj0*sj0)))+(((-1.943698062592)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.971849031296)*pz*(px*px)*(r02*r02)))+(((0.583692528196378)*r01*r02*sj0*(px*px)))+(((-0.583692528196378)*cj0*py*pz*r00*r01))+(((-3.1099169001472)*cj0*px*(pz*pz)*(r00*r00)))+(((-0.404289197019136)*cj0*px*py*sj0*(r00*r00)))+(((0.012785888817988)*px*r00*r02))+(((3.1099169001472)*py*sj0*(px*px)*(r01*r01)))+(((0.971849031296)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-6.2198338002944)*cj0*px*py*pz*r01*r02))+(((-0.0214657154787504)*cj0*pz*r00*r01*sj0))+(((0.0107328577393752)*px*r00*r02*(cj0*cj0)))+(((1.943698062592)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.583692528196378)*py*pz*sj0*(r01*r01)))+(((-0.971849031296)*r00*r02*(px*px*px)))+(((0.404289197019136)*py*pz*r01*r02))+(((0.0107328577393752)*cj0*py*r00*r02*sj0))+(((0.0343451447660006)*py*sj0*(r02*r02)))+(((0.0343451447660006)*cj0*px*(r02*r02)))+(((-0.0752599889835622)*cj0*pz*r00*r02))+(((-0.0107328577393752)*pz*(cj0*cj0)*(r00*r00)))+(((-1.943698062592)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.971849031296)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((0.202144598509568)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.404289197019136)*px*py*r00*r01*(cj0*cj0)))+(((3.887396125184)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.971849031296)*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.943698062592)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((0.202144598509568)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00706267959117617)*cj0*r00*r02))+(((-9.3297507004416)*px*r00*r01*sj0*(py*py)))+(((-3.1099169001472)*sj0*(py*py*py)*(r02*r02)))+(((-0.583692528196378)*cj0*px*py*r01*r02))+(((1.943698062592)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-2.915547093888)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.202144598509568)*(py*py)*(r02*r02)))+(((-0.00706267959117617)*r01*r02*sj0))+(((1.943698062592)*pz*(px*px)*(r00*r00)))+(((-3.1099169001472)*py*sj0*(pz*pz)*(r02*r02)))+(((1.943698062592)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.404289197019136)*py*pz*r01*r02*(sj0*sj0)))+(((1.943698062592)*pz*(py*py)*(r01*r01)))+(((1.943698062592)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-6.2198338002944)*cj0*px*(py*py)*(r01*r01)))+(((3.887396125184)*px*py*pz*r00*r01))+(((-0.583692528196378)*cj0*px*pz*(r00*r00)))+(((-0.0409148442175616)*px*r00*r01*sj0))+(((0.971849031296)*(pz*pz*pz)*(r02*r02)))+(((0.012785888817988)*pz*(r02*r02)))+(((2.915547093888)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.404289197019136)*cj0*px*pz*r01*r02*sj0))+(((3.1099169001472)*cj0*px*(py*py)*(r00*r00)))+(((-0.202144598509568)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.1099169001472)*sj0*(py*py*py)*(r01*r01)))+(((6.2198338002944)*cj0*pz*r00*r02*(py*py)))+(((0.202144598509568)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.971849031296)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.971849031296)*cj0*r00*r02*sj0*(py*py*py)))+(((-6.2198338002944)*py*sj0*(px*px)*(r00*r00)))+(((-0.404289197019136)*px*pz*r00*r02*(cj0*cj0)))+(((-3.1099169001472)*cj0*(px*px*px)*(r00*r00)))+(((-3.1099169001472)*px*r00*r01*sj0*(pz*pz)))+(((-0.971849031296)*cj0*r01*r02*sj0*(px*px*px)))+(((3.1099169001472)*cj0*r00*r01*(py*py*py)))+(((0.583692528196378)*cj0*r00*r02*(py*py)))+(((-6.2198338002944)*px*py*pz*r00*r02*sj0))+(((-3.1099169001472)*cj0*px*(pz*pz)*(r02*r02)))+(((-0.202144598509568)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.202144598509568)*(px*px)*(r02*r02)))+(((2.915547093888)*px*r00*r02*(pz*pz)))+(((-0.404289197019136)*cj0*px*py*sj0*(r01*r01)))+(((-0.583692528196378)*cj0*px*pz*(r02*r02)))+(((0.012785888817988)*py*r01*r02))+(((-2.915547093888)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-3.1099169001472)*cj0*py*r00*r01*(pz*pz)))+(((-0.971849031296)*py*r01*r02*(px*px)))+(((-0.0107328577393752)*pz*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*r01*r02*(py*py*py)))+(((-0.971849031296)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.0409148442175616)*py*sj0*(r01*r01)))+(((0.404289197019136)*cj0*r00*r01*sj0*(pz*pz)))+(((3.1099169001472)*r00*r01*sj0*(px*px*px)))+(((-0.583692528196378)*px*py*r00*r02*sj0))+(((-0.0409148442175616)*cj0*py*r00*r01))+(((-0.0409148442175616)*cj0*px*(r00*r00)))+(((-9.3297507004416)*cj0*py*r00*r01*(px*px)))+(((0.0107328577393752)*cj0*px*r01*r02*sj0))+(((-0.971849031296)*px*r00*r02*(py*py)))+(((-0.971849031296)*pz*(py*py)*(r02*r02)))+(((0.00244594964196577)*(r02*r02)))+(((0.202144598509568)*(pz*pz)*(r02*r02)))+(((-0.00489189928393155)*cj0*r00*r01*sj0))+(((-1.943698062592)*px*py*pz*r00*r01*(cj0*cj0)))+(((-2.915547093888)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.1099169001472)*cj0*(px*px*px)*(r02*r02)))+(((0.404289197019136)*px*pz*r00*r02))+(((-0.583692528196378)*py*pz*sj0*(r02*r02)))+(((-3.1099169001472)*cj0*px*(py*py)*(r02*r02)))+(((0.971849031296)*r00*r02*(cj0*cj0)*(px*px*px))));
op[2]=((((-14.9515235584)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((0.850764117758298)*cj0*py*pz*r00*r02*sj0))+(((-29.9030471168)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((-0.606433795528704)*px*py*r00*r02*sj0))+(((29.9030471168)*py*r01*r02*(pz*pz*pz)))+(((-0.606433795528704)*cj0*px*pz*(r00*r00)))+(((14.9515235584)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((29.9030471168)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.127110377531738)*py*pz*r01*r02))+(((0.418571639898298)*(px*px)*(r02*r02)))+(((-0.456967152396269)*(px*px)*(r01*r01)*(sj0*sj0)))+(((0.913934304792538)*cj0*px*py*sj0*(r01*r01)))+(((29.9030471168)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((29.9030471168)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((59.8060942336)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((89.7091413504)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.606433795528704)*py*pz*sj0*(r01*r01)))+(((0.710032902264858)*px*py*r00*r01))+(((-29.9030471168)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((14.9515235584)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((0.00444311670065905)*(cj0*cj0)*(r00*r00)))+(((-0.0635551887658688)*(pz*pz)*(r02*r02)))+(((-14.9515235584)*(px*px)*(pz*pz)*(r02*r02)))+(((-29.9030471168)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((-0.127110377531738)*px*pz*r00*r02))+(((29.9030471168)*(px*px)*(pz*pz)*(r00*r00)))+(((0.850764117758298)*px*pz*r00*r02*(cj0*cj0)))+(((-14.9515235584)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-29.9030471168)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-29.9030471168)*py*pz*r01*r02*(px*px)))+(((0.456967152396269)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-29.9030471168)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((7.4757617792)*(py*py*py*py)*(r02*r02)))+(((-29.9030471168)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.850764117758298)*cj0*r00*r01*sj0*(pz*pz)))+(((-29.9030471168)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.913934304792538)*px*py*r00*r01*(sj0*sj0)))+(((29.9030471168)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-29.9030471168)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((0.850764117758298)*py*pz*r01*r02*(sj0*sj0)))+(((-29.9030471168)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((29.9030471168)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.425382058879149)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-14.9515235584)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((14.9515235584)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.00733784892589732)*cj0*r00*r02))+(((0.03158509351712)*(py*py)*(r02*r02)*(sj0*sj0)))+(((29.9030471168)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((89.7091413504)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.03158509351712)*(cj0*cj0)*(px*px)*(r02*r02)))+(((59.8060942336)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-14.9515235584)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((29.9030471168)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.913934304792538)*cj0*px*py*sj0*(r00*r00)))+(((0.355016451132429)*(py*py)*(r01*r01)))+(((89.7091413504)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.456967152396269)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.425382058879149)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((7.4757617792)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.355016451132429)*(px*px)*(r00*r00)))+(((0.913934304792538)*px*py*r00*r01*(cj0*cj0)))+(((-0.606433795528704)*py*pz*sj0*(r02*r02)))+(((-0.00733784892589732)*r01*r02*sj0))+(((-29.9030471168)*pz*r01*r02*(py*py*py)))+(((-0.606433795528704)*cj0*px*pz*(r02*r02)))+(((0.00888623340131809)*cj0*r00*r01*sj0))+(((-29.9030471168)*px*r00*r02*(cj0*cj0)*(pz*pz*pz)))+(((-29.9030471168)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((29.9030471168)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.606433795528704)*cj0*r00*r02*(py*py)))+(((-0.606433795528704)*cj0*px*py*r01*r02))+(((29.9030471168)*px*r00*r02*(pz*pz*pz)))+(((0.418571639898298)*(py*py)*(r02*r02)))+(((59.8060942336)*px*py*r00*r01*(pz*pz)))+(((-14.9515235584)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.00444311670065905)*(r01*r01)*(sj0*sj0)))+(((-29.9030471168)*px*pz*r00*r02*(py*py)))+(((-29.9030471168)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-0.606433795528704)*px*pz*r00*r01*sj0))+(((-0.606433795528704)*cj0*py*pz*r00*r01))+(((29.9030471168)*(py*py)*(pz*pz)*(r01*r01)))+(((29.9030471168)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((7.4757617792)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((7.4757617792)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((7.4757617792)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((7.4757617792)*(px*px*px*px)*(r02*r02)))+(((-29.9030471168)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.456967152396269)*(py*py)*(r01*r01)*(sj0*sj0)))+(((29.9030471168)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.850764117758298)*cj0*px*pz*r01*r02*sj0))+(((59.8060942336)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-29.9030471168)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((7.4757617792)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-29.9030471168)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((0.06317018703424)*cj0*px*py*sj0*(r02*r02)))+(((14.9515235584)*(px*px)*(py*py)*(r02*r02)))+(((-0.00615090268610521)*(r02*r02)))+(((-14.9515235584)*cj0*r00*r01*sj0*(py*py*py*py)))+(((0.606433795528704)*r01*r02*sj0*(px*px)))+(((7.4757617792)*(pz*pz*pz*pz)*(r02*r02)))+(((7.4757617792)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-29.9030471168)*pz*r00*r02*(px*px*px)))+(((-14.9515235584)*(py*py)*(pz*pz)*(r02*r02)))+(((-29.9030471168)*cj0*py*sj0*(px*px*px)*(r01*r01))));
op[3]=((((0.971849031296)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-1.943698062592)*px*py*pz*r00*r01*(sj0*sj0)))+(((-0.971849031296)*px*r00*r02*(cj0*cj0)*(py*py)))+(((2.915547093888)*cj0*px*r01*r02*sj0*(py*py)))+(((0.202144598509568)*(py*py)*(r01*r01)*(sj0*sj0)))+(((0.0107328577393752)*py*r01*r02*(sj0*sj0)))+(((-0.202144598509568)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((-0.404289197019136)*py*pz*r01*r02))+(((2.915547093888)*py*r01*r02*(pz*pz)))+(((-0.0752599889835622)*pz*r01*r02*sj0))+(((-0.971849031296)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-3.1099169001472)*py*sj0*(px*px)*(r02*r02)))+(((6.2198338002944)*pz*r01*r02*sj0*(px*px)))+(((-2.915547093888)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((-3.1099169001472)*py*sj0*(pz*pz)*(r01*r01)))+(((0.404289197019136)*cj0*px*py*sj0*(r00*r00)))+(((0.00244594964196577)*(r01*r01)*(sj0*sj0)))+(((-1.943698062592)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.971849031296)*pz*(px*px)*(r02*r02)))+(((0.404289197019136)*px*py*r00*r01*(sj0*sj0)))+(((0.202144598509568)*(cj0*cj0)*(px*px)*(r00*r00)))+(((-3.1099169001472)*cj0*px*(pz*pz)*(r00*r00)))+(((0.583692528196378)*px*pz*r00*r01*sj0))+(((0.583692528196378)*cj0*px*py*r01*r02))+(((0.012785888817988)*px*r00*r02))+(((3.1099169001472)*py*sj0*(px*px)*(r01*r01)))+(((0.971849031296)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-6.2198338002944)*cj0*px*py*pz*r01*r02))+(((-0.0214657154787504)*cj0*pz*r00*r01*sj0))+(((0.202144598509568)*(py*py)*(r02*r02)))+(((0.0107328577393752)*px*r00*r02*(cj0*cj0)))+(((1.943698062592)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-0.971849031296)*r00*r02*(px*px*px)))+(((0.0107328577393752)*cj0*py*r00*r02*sj0))+(((0.00244594964196577)*(cj0*cj0)*(r00*r00)))+(((0.00706267959117617)*r01*r02*sj0))+(((0.0343451447660006)*py*sj0*(r02*r02)))+(((0.0343451447660006)*cj0*px*(r02*r02)))+(((-0.0752599889835622)*cj0*pz*r00*r02))+(((-0.00244594964196577)*(r02*r02)))+(((-0.0107328577393752)*pz*(cj0*cj0)*(r00*r00)))+(((-1.943698062592)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.971849031296)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.404289197019136)*cj0*r00*r01*sj0*(pz*pz)))+(((3.887396125184)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.971849031296)*r01*r02*(py*py*py)*(sj0*sj0)))+(((1.943698062592)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((-9.3297507004416)*px*r00*r01*sj0*(py*py)))+(((-3.1099169001472)*sj0*(py*py*py)*(r02*r02)))+(((1.943698062592)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-2.915547093888)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.583692528196378)*cj0*px*pz*(r02*r02)))+(((0.583692528196378)*cj0*py*pz*r00*r01))+(((1.943698062592)*pz*(px*px)*(r00*r00)))+(((-3.1099169001472)*py*sj0*(pz*pz)*(r02*r02)))+(((1.943698062592)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.202144598509568)*(px*px)*(r02*r02)))+(((0.404289197019136)*cj0*px*pz*r01*r02*sj0))+(((1.943698062592)*pz*(py*py)*(r01*r01)))+(((1.943698062592)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-6.2198338002944)*cj0*px*(py*py)*(r01*r01)))+(((3.887396125184)*px*py*pz*r00*r01))+(((0.583692528196378)*py*pz*sj0*(r02*r02)))+(((0.00489189928393155)*cj0*r00*r01*sj0))+(((0.00706267959117617)*cj0*r00*r02))+(((-0.0409148442175616)*px*r00*r01*sj0))+(((0.971849031296)*(pz*pz*pz)*(r02*r02)))+(((0.012785888817988)*pz*(r02*r02)))+(((-0.202144598509568)*(px*px)*(r01*r01)*(sj0*sj0)))+(((2.915547093888)*cj0*py*r00*r02*sj0*(px*px)))+(((3.1099169001472)*cj0*px*(py*py)*(r00*r00)))+(((0.404289197019136)*cj0*py*pz*r00*r02*sj0))+(((-3.1099169001472)*sj0*(py*py*py)*(r01*r01)))+(((0.583692528196378)*cj0*px*pz*(r00*r00)))+(((6.2198338002944)*cj0*pz*r00*r02*(py*py)))+(((-0.202144598509568)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.971849031296)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((-0.971849031296)*cj0*r00*r02*sj0*(py*py*py)))+(((-6.2198338002944)*py*sj0*(px*px)*(r00*r00)))+(((-3.1099169001472)*cj0*(px*px*px)*(r00*r00)))+(((-3.1099169001472)*px*r00*r01*sj0*(pz*pz)))+(((-0.971849031296)*cj0*r01*r02*sj0*(px*px*px)))+(((3.1099169001472)*cj0*r00*r01*(py*py*py)))+(((-6.2198338002944)*px*py*pz*r00*r02*sj0))+(((-3.1099169001472)*cj0*px*(pz*pz)*(r02*r02)))+(((0.583692528196378)*px*py*r00*r02*sj0))+(((-0.202144598509568)*(pz*pz)*(r02*r02)))+(((2.915547093888)*px*r00*r02*(pz*pz)))+(((0.404289197019136)*px*pz*r00*r02*(cj0*cj0)))+(((0.404289197019136)*py*pz*r01*r02*(sj0*sj0)))+(((0.012785888817988)*py*r01*r02))+(((-2.915547093888)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-0.202144598509568)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-3.1099169001472)*cj0*py*r00*r01*(pz*pz)))+(((-0.971849031296)*py*r01*r02*(px*px)))+(((-0.583692528196378)*r01*r02*sj0*(px*px)))+(((-0.0107328577393752)*pz*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*r01*r02*(py*py*py)))+(((-0.971849031296)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.0409148442175616)*py*sj0*(r01*r01)))+(((3.1099169001472)*r00*r01*sj0*(px*px*px)))+(((-0.0409148442175616)*cj0*py*r00*r01))+(((-0.0409148442175616)*cj0*px*(r00*r00)))+(((0.583692528196378)*py*pz*sj0*(r01*r01)))+(((-9.3297507004416)*cj0*py*r00*r01*(px*px)))+(((0.404289197019136)*px*py*r00*r01*(cj0*cj0)))+(((0.404289197019136)*cj0*px*py*sj0*(r01*r01)))+(((0.0107328577393752)*cj0*px*r01*r02*sj0))+(((-0.583692528196378)*cj0*r00*r02*(py*py)))+(((-0.971849031296)*px*r00*r02*(py*py)))+(((-0.971849031296)*pz*(py*py)*(r02*r02)))+(((-1.943698062592)*px*py*pz*r00*r01*(cj0*cj0)))+(((-2.915547093888)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.1099169001472)*cj0*(px*px*px)*(r02*r02)))+(((-3.1099169001472)*cj0*px*(py*py)*(r02*r02)))+(((0.971849031296)*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.404289197019136)*px*pz*r00*r02)));
op[4]=((((0.101072299254784)*cj0*px*pz*(r02*r02)))+(((-14.9515235584)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((14.9515235584)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.0171725723830003)*px*r00*r02*(cj0*cj0)))+(((1.5549584500736)*r01*r02*(py*py*py)))+(((-6.2198338002944)*cj0*px*py*pz*sj0*(r02*r02)))+(((-14.9515235584)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((0.0633626879000544)*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.08256044414904)*(py*py)*(r02*r02)))+(((7.4757617792)*(cj0*cj0)*(py*py)*(pz*pz)*(r00*r00)))+(((0.177508225566214)*(py*py)*(r01*r01)))+(((0.0171725723830003)*pz*(r01*r01)*(sj0*sj0)))+(((-3.1099169001472)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-1.457773546944)*px*r00*r01*sj0*(py*py)))+(((-7.4757617792)*(cj0*cj0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.00122297482098289)*cj0*r00*r02))+(((14.9515235584)*px*r00*r02*(pz*pz*pz)))+(((-0.485924515648)*cj0*px*(py*py)*(r02*r02)))+(((0.0791552346586144)*(cj0*cj0)*(pz*pz)*(r00*r00)))+(((0.485924515648)*r00*r01*sj0*(px*px*px)))+(((-7.4757617792)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-3.1099169001472)*pz*(px*px)*(r00*r00)))+(((3.1099169001472)*cj0*px*py*pz*sj0*(r01*r01)))+(((-0.485924515648)*sj0*(py*py*py)*(r01*r01)))+(((-4.6648753502208)*py*r01*r02*(pz*pz)))+(((-0.0171725723830003)*cj0*py*r00*r02*sj0))+(((0.485924515648)*cj0*r00*r01*(py*py*py)))+(((-3.1099169001472)*py*r01*r02*(cj0*cj0)*(px*px)))+(((0.485924515648)*py*sj0*(px*px)*(r01*r01)))+(((-0.485924515648)*py*sj0*(pz*pz)*(r02*r02)))+(((0.00045588845253548)*(r02*r02)))+(((14.9515235584)*(py*py)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-0.485924515648)*py*sj0*(pz*pz)*(r01*r01)))+(((14.9515235584)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((14.9515235584)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((0.971849031296)*cj0*pz*r00*r02*(py*py)))+(((-0.158310469317229)*py*pz*r01*r02*(sj0*sj0)))+(((-7.4757617792)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((0.158310469317229)*cj0*r00*r01*sj0*(pz*pz)))+(((0.0791552346586144)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((1.5549584500736)*pz*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.006392944408994)*cj0*px*(r00*r00)))+(((44.8545706752)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.485924515648)*cj0*py*r00*r01*(pz*pz)))+(((-14.9515235584)*py*r01*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.971849031296)*pz*r01*r02*sj0*(px*px)))+(((-1.5549584500736)*(pz*pz*pz)*(r02*r02)))+(((-1.5549584500736)*pz*(px*px)*(r01*r01)*(sj0*sj0)))+(((-7.4757617792)*(px*px)*(pz*pz)*(r02*r02)))+(((-7.4757617792)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.5549584500736)*(cj0*cj0)*(pz*pz*pz)*(r00*r00)))+(((4.6648753502208)*px*r00*r02*(cj0*cj0)*(pz*pz)))+(((-14.9515235584)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-0.0204574221087808)*py*r01*r02))+(((-14.9515235584)*pz*r00*r02*(px*px*px)))+(((0.0053664288696876)*py*sj0*(r02*r02)))+(((-14.9515235584)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.520137339430509)*px*pz*r00*r02))+(((-1.5549584500736)*r00*r02*(cj0*cj0)*(px*px*px)))+(((0.0171725723830003)*pz*(cj0*cj0)*(r00*r00)))+(((-0.485924515648)*py*sj0*(px*px)*(r02*r02)))+(((-1.5549584500736)*pz*(cj0*cj0)*(py*py)*(r00*r00)))+(((-0.971849031296)*px*py*pz*r00*r02*sj0))+(((-14.9515235584)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-0.0633626879000544)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*cj0*px*(py*py)*(r01*r01)))+(((0.101072299254784)*cj0*py*pz*r00*r01))+(((1.5549584500736)*cj0*r01*r02*sj0*(px*px*px)))+(((29.9030471168)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.5549584500736)*r00*r02*(px*px*px)))+(((0.101072299254784)*py*pz*sj0*(r02*r02)))+(((-14.9515235584)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((0.520137339430509)*py*pz*r01*r02))+(((-1.5549584500736)*(pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((0.0633626879000544)*(px*px)*(r01*r01)*(sj0*sj0)))+(((-14.9515235584)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((1.5549584500736)*px*r00*r02*(cj0*cj0)*(py*py)))+(((0.01579254675856)*(cj0*cj0)*(px*px)*(r02*r02)))+(((1.5549584500736)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.101072299254784)*cj0*r00*r02*(py*py)))+(((-0.126725375800109)*px*py*r00*r01*(sj0*sj0)))+(((-4.6648753502208)*cj0*px*r01*r02*sj0*(py*py)))+(((4.6648753502208)*py*r01*r02*(pz*pz)*(sj0*sj0)))+(((14.9515235584)*pz*r00*r02*(cj0*cj0)*(px*px*px)))+(((-0.00261956289051712)*cj0*r00*r01*sj0))+(((-7.4757617792)*(py*py)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((14.9515235584)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((-6.2198338002944)*px*py*pz*r00*r01))+(((44.8545706752)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((29.9030471168)*px*py*r00*r01*(pz*pz)))+(((-0.158310469317229)*px*pz*r00*r02*(cj0*cj0)))+(((7.4757617792)*(px*px)*(py*py)*(r02*r02)))+(((-14.9515235584)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((4.6648753502208)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.126725375800109)*cj0*px*py*sj0*(r01*r01)))+(((-0.0171725723830003)*cj0*px*r01*r02*sj0))+(((-14.9515235584)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-0.0117593732786816)*cj0*pz*r00*r02))+(((3.7378808896)*(px*px*px*px)*(r01*r01)*(sj0*sj0)))+(((-0.971849031296)*py*sj0*(px*px)*(r00*r00)))+(((7.4757617792)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-0.0633626879000544)*(cj0*cj0)*(px*px)*(r00*r00)))+(((14.9515235584)*(py*py)*(pz*pz)*(r01*r01)))+(((1.5549584500736)*cj0*r00*r02*sj0*(py*py*py)))+(((14.9515235584)*pz*r01*r02*(py*py*py)*(sj0*sj0)))+(((-0.0204574221087808)*px*r00*r02))+(((-7.4757617792)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.260068669715254)*(pz*pz)*(r02*r02)))+(((0.177508225566214)*(px*px)*(r00*r00)))+(((14.9515235584)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-0.971849031296)*cj0*px*py*pz*r01*r02))+(((14.9515235584)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((3.7378808896)*(px*px*px*px)*(r02*r02)))+(((-0.126725375800109)*cj0*px*py*sj0*(r00*r00)))+(((-14.9515235584)*pz*r01*r02*(py*py*py)))+(((-0.006392944408994)*px*r00*r01*sj0))+(((1.5549584500736)*pz*(py*py)*(r02*r02)))+(((-0.158310469317229)*cj0*px*pz*r01*r02*sj0))+(((-14.9515235584)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((3.7378808896)*(py*py*py*py)*(r01*r01)*(sj0*sj0)))+(((0.101072299254784)*px*pz*r00*r01*sj0))+(((-3.1099169001472)*pz*(cj0*cj0)*(px*px)*(r02*r02)))+(((-14.9515235584)*py*pz*r01*r02*(px*px)))+(((-3.1099169001472)*pz*(py*py)*(r01*r01)))+(((-14.9515235584)*px*pz*r00*r02*(py*py)))+(((-0.0117593732786816)*pz*r01*r02*sj0))+(((0.101072299254784)*cj0*px*py*r01*r02))+(((-0.485924515648)*cj0*(px*px*px)*(r02*r02)))+(((3.7378808896)*(cj0*cj0)*(pz*pz*pz*pz)*(r00*r00)))+(((-0.485924515648)*cj0*px*(pz*pz)*(r02*r02)))+(((29.9030471168)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((29.9030471168)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-1.457773546944)*cj0*py*r00*r01*(px*px)))+(((3.1099169001472)*px*py*pz*r00*r01*(cj0*cj0)))+(((1.5549584500736)*px*r00*r02*(py*py)))+(((-14.9515235584)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-0.485924515648)*sj0*(py*py*py)*(r02*r02)))+(((1.5549584500736)*pz*(cj0*cj0)*(px*px)*(r00*r00)))+(((-0.126725375800109)*px*py*r00*r01*(cj0*cj0)))+(((-14.9515235584)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((14.9515235584)*py*r01*r02*(pz*pz*pz)))+(((-0.0204574221087808)*pz*(r02*r02)))+(((44.8545706752)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((0.03158509351712)*cj0*px*py*sj0*(r02*r02)))+(((0.355016451132429)*px*py*r00*r01))+(((3.7378808896)*(py*py*py*py)*(r02*r02)))+(((14.9515235584)*(cj0*cj0)*(px*px)*(pz*pz)*(r02*r02)))+(((3.1099169001472)*px*py*pz*r00*r01*(sj0*sj0)))+(((-14.9515235584)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.485924515648)*cj0*px*(py*py)*(r00*r00)))+(((0.0343451447660006)*cj0*pz*r00*r01*sj0))+(((-4.6648753502208)*px*r00*r02*(pz*pz)))+(((1.5549584500736)*py*r01*r02*(px*px)))+(((3.7378808896)*(pz*pz*pz*pz)*(r01*r01)*(sj0*sj0)))+(((-4.6648753502208)*cj0*py*r00*r02*sj0*(px*px)))+(((0.101072299254784)*cj0*px*pz*(r00*r00)))+(((3.7378808896)*(pz*pz*pz*pz)*(r02*r02)))+(((0.0053664288696876)*cj0*px*(r02*r02)))+(((0.00122297482098289)*r01*r02*sj0))+(((7.4757617792)*(px*px)*(pz*pz)*(r01*r01)*(sj0*sj0)))+(((3.1099169001472)*cj0*px*py*pz*sj0*(r00*r00)))+(((-0.006392944408994)*py*sj0*(r01*r01)))+(((-0.0171725723830003)*py*r01*r02*(sj0*sj0)))+(((-0.08256044414904)*(px*px)*(r02*r02)))+(((4.6648753502208)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.158310469317229)*cj0*py*pz*r00*r02*sj0))+(((-0.006392944408994)*cj0*py*r00*r01))+(((-14.9515235584)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.00130978144525856)*(cj0*cj0)*(r00*r00)))+(((3.7378808896)*(cj0*cj0)*(py*py*py*py)*(r00*r00)))+(((-0.101072299254784)*r01*r02*sj0*(px*px)))+(((-0.00130978144525856)*(r01*r01)*(sj0*sj0)))+(((0.101072299254784)*px*py*r00*r02*sj0))+(((1.5549584500736)*pz*(px*px)*(r02*r02)))+(((-0.485924515648)*cj0*(px*px*px)*(r00*r00)))+(((-0.485924515648)*cj0*px*(pz*pz)*(r00*r00)))+(((0.01579254675856)*(py*py)*(r02*r02)*(sj0*sj0)))+(((-1.5549584500736)*r01*r02*(py*py*py)*(sj0*sj0)))+(((-7.4757617792)*(py*py)*(pz*pz)*(r02*r02)))+(((-3.1099169001472)*px*r00*r02*(py*py)*(sj0*sj0)))+(((0.101072299254784)*py*pz*sj0*(r01*r01)))+(((-0.485924515648)*px*r00*r01*sj0*(pz*pz)))+(((14.9515235584)*(px*px)*(pz*pz)*(r00*r00)))+(((-3.1099169001472)*pz*(py*py)*(r02*r02)*(sj0*sj0)))+(((3.7378808896)*(cj0*cj0)*(px*px*px*px)*(r00*r00)))+(((-14.9515235584)*px*r00*r02*(cj0*cj0)*(pz*pz*pz))));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x25=(cj0*px);
IkReal x26=((2.84090909090909)*cj1);
IkReal x27=((9.09090909090909)*sj1);
IkReal x28=(py*sj0);
cj3array[0]=((-0.482681381118881)+(((43.7062937062937)*(py*py)))+(((-1.0)*x27*x28))+(((-1.0)*x25*x26))+(((-1.0)*x25*x27))+(((2.84090909090909)*pz*sj1))+(((-9.09090909090909)*cj1*pz))+(((-1.0)*x26*x28))+(((43.7062937062937)*(px*px)))+(((43.7062937062937)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x29=px*px;
IkReal x30=pz*pz;
IkReal x31=py*py;
IkReal x32=(px*sj0);
IkReal x33=((2.0)*py);
IkReal x34=(r00*sj0);
IkReal x35=((0.065)*sj1);
IkReal x36=(py*r00);
IkReal x37=((0.208)*sj1);
IkReal x38=(cj0*r01);
IkReal x39=(cj0*r02);
IkReal x40=((0.065)*cj1);
IkReal x41=(px*r01);
IkReal x42=((0.208)*cj1);
IkReal x43=(pz*x42);
IkReal x44=((1.0)*x31);
evalcond[0]=((0.022916)+(((-1.0)*x30*x34))+(((-1.0)*pz*x33*x39))+((x29*x34))+((x29*x38))+((x34*x43))+(((-1.0)*x37*x41))+(((-1.0)*r02*x32*x42))+((py*x39*x42))+(((-0.01187225)*x34))+(((-1.0)*py*x35*x39))+(((2.0)*pz*r02*x32))+((x36*x40))+(((-1.0)*x38*x44))+(((-1.0)*x38*x43))+((x36*x37))+((pz*x35*x38))+(((-1.0)*x40*x41))+(((-1.0)*pz*x34*x35))+(((-1.0)*cj0*px*r00*x33))+((x30*x38))+(((-1.0)*x34*x44))+(((0.02288)*(IKcos(j3))))+((r02*x32*x35))+((r01*x32*x33))+(((0.01187225)*x38)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x45=((1040.0)*cj1);
IkReal x46=(cj0*px);
IkReal x47=((1100.0)*sj3);
IkReal x48=(cj1*pz);
IkReal x49=((1040.0)*sj1);
IkReal x50=((1100.0)*cj3);
IkReal x51=((1040.0)*py*sj0);
IkReal x52=((1100.0)*pz*sj1);
IkReal x53=(py*sj0*sj1);
IkReal x54=(cj1*py*sj0);
CheckValue<IkReal> x55 = IKatan2WithCheck(IkReal(((-108.16)+((pz*x45))+((x46*x49))+(((-1.0)*x47*x54))+((pz*sj1*x47))+((x50*x53))+((x48*x50))+(((-1.0)*cj1*x46*x47))+((sj1*x46*x50))+(((35.75)*sj3))+((py*sj0*x49))+(((-114.4)*cj3)))),IkReal(((-33.8)+((sj1*x46*x47))+((x47*x48))+(((-35.75)*cj3))+(((-1.0)*pz*x49))+((x50*x54))+(((-1.0)*pz*sj1*x50))+((x45*x46))+((cj1*x46*x50))+((x47*x53))+((py*sj0*x45))+(((-114.4)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x55.valid){
continue;
}
CheckValue<IkReal> x56=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x56.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x55.value)+(((1.5707963267949)*(x56.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x57=IKcos(j2);
IkReal x58=IKsin(j2);
IkReal x59=((1.0)*cj1);
IkReal x60=(py*sj1);
IkReal x61=(cj0*r02);
IkReal x62=(sj0*sj1);
IkReal x63=(pz*r00);
IkReal x64=((0.11)*cj3);
IkReal x65=(px*r02);
IkReal x66=(cj0*pz);
IkReal x67=(r00*sj0);
IkReal x68=((0.11)*sj3);
IkReal x69=(cj0*r01);
IkReal x70=(cj0*px);
IkReal x71=((0.104)*x58);
IkReal x72=((0.104)*x57);
IkReal x73=((1.0)*r01*sj1);
IkReal x74=(x58*x64);
IkReal x75=(x57*x68);
IkReal x76=(x57*x64);
IkReal x77=(x58*x68);
IkReal x78=(x76+x72);
IkReal x79=(x75+x74+x71);
evalcond[0]=((0.0325)+(((-1.0)*py*sj0*x59))+(((-1.0)*x77))+(((-1.0)*x59*x70))+x78+((pz*sj1)));
evalcond[1]=((0.104)+(((-1.0)*sj1*x70))+x79+(((-1.0)*sj0*x60))+(((-1.0)*pz*x59)));
evalcond[2]=((((-1.0)*x79))+(((-1.0)*px*x73))+(((0.104)*x69))+(((-1.0)*r01*x59*x66))+(((-1.0)*sj0*x59*x65))+((cj1*py*x61))+((r00*x60))+((cj1*sj0*x63))+(((-0.104)*x67)));
evalcond[3]=((((-1.0)*x62*x65))+(((-1.0)*x77))+(((-1.0)*x66*x73))+((x60*x61))+(((-1.0)*py*r00*x59))+((x62*x63))+(((-0.0325)*x69))+x78+(((0.0325)*x67))+((cj1*px*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x80=(cj0*px);
IkReal x81=((2.84090909090909)*cj1);
IkReal x82=((9.09090909090909)*sj1);
IkReal x83=(py*sj0);
cj3array[0]=((-0.482681381118881)+(((-1.0)*x81*x83))+(((-1.0)*x82*x83))+(((43.7062937062937)*(py*py)))+(((-1.0)*x80*x81))+(((-1.0)*x80*x82))+(((2.84090909090909)*pz*sj1))+(((-9.09090909090909)*cj1*pz))+(((43.7062937062937)*(px*px)))+(((43.7062937062937)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x84=px*px;
IkReal x85=pz*pz;
IkReal x86=py*py;
IkReal x87=(px*sj0);
IkReal x88=((2.0)*py);
IkReal x89=(r00*sj0);
IkReal x90=((0.065)*sj1);
IkReal x91=(py*r00);
IkReal x92=((0.208)*sj1);
IkReal x93=(cj0*r01);
IkReal x94=(cj0*r02);
IkReal x95=((0.065)*cj1);
IkReal x96=(px*r01);
IkReal x97=((0.208)*cj1);
IkReal x98=(pz*x97);
IkReal x99=((1.0)*x86);
evalcond[0]=((-0.022916)+(((-1.0)*x95*x96))+((x84*x89))+((x89*x98))+((r01*x87*x88))+(((-1.0)*py*x90*x94))+((pz*x90*x93))+(((2.0)*pz*r02*x87))+((r02*x87*x90))+((py*x94*x97))+((x85*x93))+(((-1.0)*x85*x89))+(((-0.02288)*(IKcos(j3))))+(((0.01187225)*x93))+(((-1.0)*pz*x89*x90))+(((-1.0)*pz*x88*x94))+(((-1.0)*x92*x96))+(((-1.0)*cj0*px*r00*x88))+(((-1.0)*r02*x87*x97))+(((-1.0)*x93*x99))+(((-1.0)*x93*x98))+(((-0.01187225)*x89))+((x84*x93))+(((-1.0)*x89*x99))+((x91*x92))+((x91*x95)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x100=((1040.0)*cj1);
IkReal x101=(cj0*px);
IkReal x102=((1100.0)*sj3);
IkReal x103=(cj1*pz);
IkReal x104=((1040.0)*sj1);
IkReal x105=((1100.0)*cj3);
IkReal x106=((1040.0)*py*sj0);
IkReal x107=((1100.0)*pz*sj1);
IkReal x108=(py*sj0*sj1);
IkReal x109=(cj1*py*sj0);
CheckValue<IkReal> x110=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x110.valid){
continue;
}
CheckValue<IkReal> x111 = IKatan2WithCheck(IkReal(((-108.16)+((pz*x100))+((x103*x105))+((sj1*x101*x105))+((x105*x108))+(((-1.0)*x102*x109))+(((-1.0)*cj1*x101*x102))+(((35.75)*sj3))+((x101*x104))+(((-114.4)*cj3))+((pz*sj1*x102))+((py*sj0*x104)))),IkReal(((-33.8)+(((-1.0)*pz*x104))+(((-1.0)*pz*sj1*x105))+((cj1*x101*x105))+(((-35.75)*cj3))+((x102*x103))+((x102*x108))+((sj1*x101*x102))+((x105*x109))+(((-114.4)*sj3))+((x100*x101))+((py*sj0*x100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x111.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x110.value)))+(x111.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x112=IKcos(j2);
IkReal x113=IKsin(j2);
IkReal x114=((1.0)*cj1);
IkReal x115=(py*sj1);
IkReal x116=(cj0*r02);
IkReal x117=(sj0*sj1);
IkReal x118=(pz*r00);
IkReal x119=((0.11)*cj3);
IkReal x120=(px*r02);
IkReal x121=(cj0*pz);
IkReal x122=(r00*sj0);
IkReal x123=((0.11)*sj3);
IkReal x124=(cj0*r01);
IkReal x125=(cj0*px);
IkReal x126=((0.104)*x113);
IkReal x127=((0.104)*x112);
IkReal x128=((1.0)*r01*sj1);
IkReal x129=(x113*x119);
IkReal x130=(x112*x123);
IkReal x131=(x113*x123);
IkReal x132=(x112*x119);
IkReal x133=(x132+x127);
IkReal x134=(x130+x126+x129);
evalcond[0]=((0.0325)+(((-1.0)*py*sj0*x114))+x133+(((-1.0)*x131))+(((-1.0)*x114*x125))+((pz*sj1)));
evalcond[1]=((0.104)+(((-1.0)*sj1*x125))+x134+(((-1.0)*pz*x114))+(((-1.0)*sj0*x115)));
evalcond[2]=((((-1.0)*sj0*x114*x120))+(((-1.0)*px*x128))+(((-1.0)*r01*x114*x121))+x134+((cj1*sj0*x118))+((r00*x115))+((cj1*py*x116))+(((0.104)*x124))+(((-0.104)*x122)));
evalcond[3]=((((-1.0)*py*r00*x114))+(((-1.0)*x117*x120))+(((0.0325)*x122))+x131+(((-1.0)*x133))+(((-1.0)*x121*x128))+((x115*x116))+(((-0.0325)*x124))+((cj1*px*r01))+((x117*x118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x135=py*py;
IkReal x136=pz*pz;
IkReal x137=px*px;
IkReal x138=(r01*sj1);
IkReal x139=((1300.0)*px);
IkReal x140=(r00*sj0);
IkReal x141=(cj0*r01);
IkReal x142=((12500.0)*pz);
IkReal x143=(cj1*r02);
IkReal x144=(r00*sj1);
IkReal x145=((1300.0)*py);
IkReal x146=((406.25)*sj1);
IkReal x147=((406.25)*cj1);
IkReal x148=(px*r01);
IkReal x149=(cj0*py);
IkReal x150=(px*r00);
IkReal x151=((4.0625)*cj1);
IkReal x152=((6250.0)*x135);
IkReal x153=(px*r02*sj0);
IkReal x154=((6250.0)*x136);
IkReal x155=((1300.0)*cj1*pz);
IkReal x156=((6250.0)*x137);
CheckValue<IkReal> x157=IKPowWithIntegerCheck(cj4,-1);
if(!x157.valid){
continue;
}
CheckValue<IkReal> x158=IKPowWithIntegerCheck(sj4,-1);
if(!x158.valid){
continue;
}
if( IKabs(((0.0769230769230769)*(x157.value)*((((cj0*r00*x151))+(((-125.0)*py*r01))+(((-125.0)*x150))+(((-4.0625)*r02*sj1))+(((13.0)*x143))+(((13.0)*sj0*x138))+((r01*sj0*x151))+(((-125.0)*pz*r02))+(((13.0)*cj0*x144)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.00699300699300699)*(x158.value)*((((r02*x146*x149))+((x138*x139))+((pz*x140*x146))+((x140*x152))+((x140*x154))+(((-1.0)*x142*x153))+(((-12500.0)*py*sj0*x148))+(((-1.0)*x140*x155))+(((-1.0)*x140*x156))+(((-406.25)*cj0*pz*x138))+(((-1.0)*x144*x145))+((x141*x155))+((x141*x152))+(((-143.225)*sj4))+(((-1.0)*x141*x156))+(((-1.0)*x141*x154))+((r02*x142*x149))+((x147*x148))+((sj0*x139*x143))+(((-1.0)*cj0*x143*x145))+(((-1.0)*x146*x153))+(((-1.0)*py*r00*x147))+(((-74.2015625)*x141))+(((74.2015625)*x140))+(((12500.0)*x149*x150)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0769230769230769)*(x157.value)*((((cj0*r00*x151))+(((-125.0)*py*r01))+(((-125.0)*x150))+(((-4.0625)*r02*sj1))+(((13.0)*x143))+(((13.0)*sj0*x138))+((r01*sj0*x151))+(((-125.0)*pz*r02))+(((13.0)*cj0*x144))))))+IKsqr(((0.00699300699300699)*(x158.value)*((((r02*x146*x149))+((x138*x139))+((pz*x140*x146))+((x140*x152))+((x140*x154))+(((-1.0)*x142*x153))+(((-12500.0)*py*sj0*x148))+(((-1.0)*x140*x155))+(((-1.0)*x140*x156))+(((-406.25)*cj0*pz*x138))+(((-1.0)*x144*x145))+((x141*x155))+((x141*x152))+(((-143.225)*sj4))+(((-1.0)*x141*x156))+(((-1.0)*x141*x154))+((r02*x142*x149))+((x147*x148))+((sj0*x139*x143))+(((-1.0)*cj0*x143*x145))+(((-1.0)*x146*x153))+(((-1.0)*py*r00*x147))+(((-74.2015625)*x141))+(((74.2015625)*x140))+(((12500.0)*x149*x150))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0769230769230769)*(x157.value)*((((cj0*r00*x151))+(((-125.0)*py*r01))+(((-125.0)*x150))+(((-4.0625)*r02*sj1))+(((13.0)*x143))+(((13.0)*sj0*x138))+((r01*sj0*x151))+(((-125.0)*pz*r02))+(((13.0)*cj0*x144))))), ((0.00699300699300699)*(x158.value)*((((r02*x146*x149))+((x138*x139))+((pz*x140*x146))+((x140*x152))+((x140*x154))+(((-1.0)*x142*x153))+(((-12500.0)*py*sj0*x148))+(((-1.0)*x140*x155))+(((-1.0)*x140*x156))+(((-406.25)*cj0*pz*x138))+(((-1.0)*x144*x145))+((x141*x155))+((x141*x152))+(((-143.225)*sj4))+(((-1.0)*x141*x156))+(((-1.0)*x141*x154))+((r02*x142*x149))+((x147*x148))+((sj0*x139*x143))+(((-1.0)*cj0*x143*x145))+(((-1.0)*x146*x153))+(((-1.0)*py*r00*x147))+(((-74.2015625)*x141))+(((74.2015625)*x140))+(((12500.0)*x149*x150))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x159=IKcos(j3);
IkReal x160=px*px;
IkReal x161=pz*pz;
IkReal x162=py*py;
IkReal x163=(px*r01);
IkReal x164=(py*sj0);
IkReal x165=(r00*sj0);
IkReal x166=((0.065)*cj1);
IkReal x167=(r00*sj1);
IkReal x168=((0.0325)*cj0);
IkReal x169=(py*r00);
IkReal x170=((0.208)*sj1);
IkReal x171=((0.104)*r02);
IkReal x172=(r01*sj0);
IkReal x173=((1.0)*pz);
IkReal x174=((0.208)*py);
IkReal x175=(cj0*r01);
IkReal x176=((0.104)*cj1);
IkReal x177=(cj0*r00);
IkReal x178=(cj0*px);
IkReal x179=(cj0*py);
IkReal x180=((0.0325)*cj1);
IkReal x181=(px*sj0);
IkReal x182=((0.0325)*sj1);
IkReal x183=((0.104)*cj4);
IkReal x184=(cj1*r02);
IkReal x185=((0.065)*pz*sj1);
IkReal x186=((1.0)*x161);
IkReal x187=((0.208)*cj1*pz);
IkReal x188=((0.065)*r02*sj1);
IkReal x189=((0.02288)*x159);
IkReal x190=((1.0)*x162);
IkReal x191=((2.0)*pz*r02);
evalcond[0]=(((x172*x180))+(((-1.0)*px*r00))+(((-1.0)*r02*x173))+((cj1*r00*x168))+(((0.104)*sj1*x172))+(((-1.0)*r02*x182))+((cj1*x171))+(((-1.0)*py*r01))+(((-1.0)*x183*(IKsin(j3))))+(((0.104)*cj0*x167)));
evalcond[1]=((0.01104375)+(((-1.0)*x186))+(((-1.0)*x185))+(((-1.0)*x190))+x187+x189+((x166*x178))+(((-1.0)*x160))+((x164*x166))+((x164*x170))+((x170*x178)));
evalcond[2]=(((x176*x177))+(((-0.11)*cj4))+((x172*x176))+(((-1.0)*x159*x183))+(((-1.0)*r02*x180))+(((-1.0)*x172*x182))+((r02*x164))+(((-1.0)*x172*x173))+(((-1.0)*sj1*x171))+(((-1.0)*x173*x177))+(((-1.0)*x167*x168))+((r02*x178)));
evalcond[3]=((((2.0)*x163*x164))+((x161*x175))+(((-1.0)*x163*x170))+(((-0.208)*x181*x184))+(((-1.0)*x163*x166))+((cj0*x174*x184))+((x175*x185))+(((0.022916)*sj4))+((x167*x174))+(((0.01187225)*x175))+((x166*x169))+((sj4*x189))+((x165*x187))+(((-1.0)*x165*x186))+(((-1.0)*x165*x185))+(((-1.0)*x175*x187))+(((-0.01187225)*x165))+(((-1.0)*x165*x190))+(((-1.0)*x175*x190))+(((-1.0)*x179*x188))+(((-2.0)*x169*x178))+((x181*x191))+((x160*x165))+(((-1.0)*x179*x191))+((x181*x188))+((x160*x175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x192=(cj3*cj4);
j2eval[0]=((((1.05769230769231)*cj4))+x192);
j2eval[1]=IKsign(((((11.0)*cj4))+(((10.4)*x192))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x193=((1040.0)*cj1);
IkReal x194=(cj0*px);
IkReal x195=((1100.0)*sj3);
IkReal x196=(cj1*pz);
IkReal x197=((1040.0)*sj1);
IkReal x198=((1100.0)*cj3);
IkReal x199=((1040.0)*py*sj0);
IkReal x200=((1100.0)*pz*sj1);
IkReal x201=(py*sj0*sj1);
IkReal x202=(cj1*py*sj0);
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal(((-108.16)+(((-1.0)*x195*x202))+((x198*x201))+((x196*x198))+(((-1.0)*cj1*x194*x195))+((sj1*x194*x198))+((x194*x197))+((pz*sj1*x195))+(((35.75)*sj3))+((py*sj0*x197))+(((-114.4)*cj3))+((pz*x193)))),IkReal(((-33.8)+((x198*x202))+((x193*x194))+(((-1.0)*pz*x197))+(((-1.0)*pz*sj1*x198))+((x195*x201))+((cj1*x194*x198))+(((-35.75)*cj3))+((x195*x196))+((sj1*x194*x195))+((py*sj0*x193))+(((-114.4)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x204.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x203.value)+(((1.5707963267949)*(x204.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x205=IKcos(j2);
IkReal x206=IKsin(j2);
IkReal x207=((1.0)*cj1);
IkReal x208=(py*sj1);
IkReal x209=(cj0*r02);
IkReal x210=(sj0*sj1);
IkReal x211=(pz*r00);
IkReal x212=((0.11)*cj3);
IkReal x213=(px*r02);
IkReal x214=(cj0*pz);
IkReal x215=(r00*sj0);
IkReal x216=((0.11)*sj3);
IkReal x217=(cj0*r01);
IkReal x218=(cj0*px);
IkReal x219=((0.104)*x206);
IkReal x220=((0.104)*x205);
IkReal x221=((1.0)*r01*sj1);
IkReal x222=(x206*x212);
IkReal x223=(x205*x216);
IkReal x224=(x205*x212);
IkReal x225=(x206*x216);
IkReal x226=(x220+x224);
IkReal x227=(x219+x223+x222);
evalcond[0]=((0.0325)+(((-1.0)*py*sj0*x207))+(((-1.0)*x207*x218))+x226+((pz*sj1))+(((-1.0)*x225)));
evalcond[1]=((0.104)+(((-1.0)*sj1*x218))+(((-1.0)*pz*x207))+x227+(((-1.0)*sj0*x208)));
evalcond[2]=((((-1.0)*sj0*x207*x213))+(((0.104)*x217))+((cj1*sj0*x211))+((r00*x208))+(((-1.0)*r01*x207*x214))+(((-1.0)*px*x221))+((cj1*py*x209))+(((-0.104)*x215))+(((-1.0)*x227)));
evalcond[3]=(((x210*x211))+(((-1.0)*x214*x221))+x226+(((0.0325)*x215))+(((-1.0)*py*r00*x207))+((x208*x209))+((cj1*px*r01))+(((-1.0)*x225))+(((-1.0)*x210*x213))+(((-0.0325)*x217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x228=((1040.0)*cj1);
IkReal x229=(cj0*px);
IkReal x230=((1100.0)*sj3);
IkReal x231=(cj1*pz);
IkReal x232=((1040.0)*sj1);
IkReal x233=((1100.0)*cj3);
IkReal x234=((1040.0)*py*sj0);
IkReal x235=((1100.0)*pz*sj1);
IkReal x236=(py*sj0*sj1);
IkReal x237=(cj1*py*sj0);
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239 = IKatan2WithCheck(IkReal(((-108.16)+(((-1.0)*x230*x237))+((x229*x232))+((py*sj0*x232))+((pz*x228))+((x233*x236))+(((35.75)*sj3))+((pz*sj1*x230))+((x231*x233))+(((-1.0)*cj1*x229*x230))+(((-114.4)*cj3))+((sj1*x229*x233)))),IkReal(((-33.8)+(((-1.0)*pz*x232))+((x228*x229))+(((-35.75)*cj3))+((x233*x237))+((cj1*x229*x233))+((x230*x231))+((x230*x236))+(((-1.0)*pz*sj1*x233))+((py*sj0*x228))+(((-114.4)*sj3))+((sj1*x229*x230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x239.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x238.value)))+(x239.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x240=IKcos(j2);
IkReal x241=IKsin(j2);
IkReal x242=((1.0)*cj1);
IkReal x243=(py*sj1);
IkReal x244=(cj0*r02);
IkReal x245=(sj0*sj1);
IkReal x246=(pz*r00);
IkReal x247=((0.11)*cj3);
IkReal x248=(px*r02);
IkReal x249=(cj0*pz);
IkReal x250=(r00*sj0);
IkReal x251=((0.11)*sj3);
IkReal x252=(cj0*r01);
IkReal x253=(cj0*px);
IkReal x254=((0.104)*x241);
IkReal x255=((0.104)*x240);
IkReal x256=((1.0)*r01*sj1);
IkReal x257=(x241*x247);
IkReal x258=(x240*x251);
IkReal x259=(x241*x251);
IkReal x260=(x240*x247);
IkReal x261=(x255+x260);
IkReal x262=(x258+x254+x257);
evalcond[0]=((0.0325)+(((-1.0)*py*sj0*x242))+(((-1.0)*x242*x253))+x261+((pz*sj1))+(((-1.0)*x259)));
evalcond[1]=((0.104)+(((-1.0)*pz*x242))+(((-1.0)*sj0*x243))+(((-1.0)*sj1*x253))+x262);
evalcond[2]=(((cj1*sj0*x246))+((cj1*py*x244))+(((-1.0)*sj0*x242*x248))+x262+(((-1.0)*r01*x242*x249))+((r00*x243))+(((-0.104)*x250))+(((-1.0)*px*x256))+(((0.104)*x252)));
evalcond[3]=((((-0.0325)*x252))+(((-1.0)*py*r00*x242))+(((0.0325)*x250))+x259+(((-1.0)*x249*x256))+((x245*x246))+(((-1.0)*x261))+((cj1*px*r01))+((x243*x244))+(((-1.0)*x245*x248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x263=((4.67289719626168)*cj1);
IkReal x264=(py*sj0);
IkReal x265=(cj0*px);
IkReal x266=((4.67289719626168)*sj1);
if( IKabs(((-0.485981308411215)+((x264*x266))+((pz*x263))+((x265*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.151869158878505)+((x263*x265))+((x263*x264))+(((-1.0)*pz*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.485981308411215)+((x264*x266))+((pz*x263))+((x265*x266))))+IKsqr(((-0.151869158878505)+((x263*x265))+((x263*x264))+(((-1.0)*pz*x266))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.485981308411215)+((x264*x266))+((pz*x263))+((x265*x266))), ((-0.151869158878505)+((x263*x265))+((x263*x264))+(((-1.0)*pz*x266))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x267=IKcos(j2);
IkReal x268=IKsin(j2);
IkReal x269=py*py;
IkReal x270=px*px;
IkReal x271=pz*pz;
IkReal x272=((1.0)*cj1);
IkReal x273=(py*sj1);
IkReal x274=(r01*sj0);
IkReal x275=(cj0*r00);
IkReal x276=(r02*sj1);
IkReal x277=((2.0)*pz);
IkReal x278=(cj0*px);
IkReal x279=(px*sj0);
IkReal x280=(cj1*r00);
IkReal x281=(pz*sj0);
IkReal x282=((0.065)*r02);
IkReal x283=((2.0)*py);
IkReal x284=(r00*sj0);
IkReal x285=((0.065)*pz);
IkReal x286=(cj0*r01);
IkReal x287=(py*r01);
IkReal x288=((0.00676)*sj1);
IkReal x289=(cj1*r02);
IkReal x290=((0.208)*pz);
IkReal x291=(px*r00);
IkReal x292=(py*sj0);
IkReal x293=((1.0)*sj1);
IkReal x294=((0.045796)*cj4);
IkReal x295=((0.00975975)*sj1);
IkReal x296=(px*r01);
IkReal x297=((0.00975975)*cj1);
IkReal x298=((0.00676)*cj1);
IkReal x299=((0.208)*r02);
IkReal x300=((0.214)*x268);
IkReal x301=((0.214)*x267);
evalcond[0]=((((-1.0)*x272*x274))+(((-1.0)*x272*x275))+(((-1.0)*cj4*x268))+x276);
evalcond[1]=((((-1.0)*x275*x293))+((cj4*x267))+(((-1.0)*x274*x293))+(((-1.0)*r02*x272)));
evalcond[2]=((0.0325)+(((-1.0)*x272*x278))+(((-1.0)*x272*x292))+x301+((pz*sj1)));
evalcond[3]=((0.104)+(((-1.0)*pz*x272))+(((-1.0)*sj0*x273))+x300+(((-1.0)*x278*x293)));
evalcond[4]=((((0.104)*x286))+(((-1.0)*sj4*x300))+(((-1.0)*x293*x296))+(((-1.0)*pz*x272*x286))+(((-0.104)*x284))+((cj0*py*x289))+((x280*x281))+(((-1.0)*r02*x272*x279))+((r00*x273)));
evalcond[5]=((((-1.0)*x276*x279))+(((-1.0)*py*r00*x272))+((cj0*r02*x273))+((r00*sj1*x281))+((cj1*x296))+(((0.0325)*x284))+((sj4*x301))+(((-0.0325)*x286))+(((-1.0)*pz*x286*x293)));
evalcond[6]=((((0.00676)*x289))+((x279*x280*x283))+(((-1.0)*sj1*x277*x291))+((x275*x290))+((x277*x289*x292))+((x277*x278*x289))+(((-1.0)*x270*x272*x274))+(((-1.0)*x268*x294))+(((-1.0)*x275*x297))+(((-1.0)*r01*x273*x277))+((x274*x288))+(((-1.0)*x271*x276))+((cj1*r01*x278*x283))+((cj1*x270*x275))+(((-1.0)*x269*x272*x275))+(((-0.065)*x287))+((x270*x276))+(((-1.0)*x278*x299))+(((-1.0)*x274*x297))+((x275*x288))+(((-1.0)*pz*x282))+(((0.00975975)*x276))+((x274*x290))+((x269*x276))+(((-1.0)*x271*x272*x274))+(((-1.0)*x271*x272*x275))+((cj1*x269*x274))+(((-0.065)*x291))+(((-1.0)*x292*x299)));
evalcond[7]=((((-1.0)*x270*x274*x293))+((cj1*x277*x287))+((r02*sj0*x273*x277))+((x278*x282))+(((-0.208)*x291))+(((-1.0)*r02*x269*x272))+((x275*x295))+((x275*x298))+(((2.0)*r01*x273*x278))+((x282*x292))+((px*x277*x280))+((x267*x294))+((x271*x289))+(((-1.0)*r02*x290))+(((-1.0)*x271*x274*x293))+(((2.0)*r00*x273*x279))+((x276*x277*x278))+(((-1.0)*r02*x270*x272))+((sj1*x269*x274))+(((0.00975975)*x289))+(((-0.208)*x287))+(((-1.0)*x271*x275*x293))+((x274*x295))+((x274*x298))+(((-0.00676)*x276))+(((-1.0)*x275*x285))+((sj1*x270*x275))+(((-1.0)*x269*x275*x293))+(((-1.0)*x274*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x302=((166.666666666667)*pz);
IkReal x303=((166.666666666667)*cj1);
IkReal x304=(py*sj0);
IkReal x305=(cj0*px);
IkReal x306=((166.666666666667)*sj1);
if( IKabs(((17.3333333333333)+(((-1.0)*cj1*x302))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.41666666666667)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+((sj1*x302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.3333333333333)+(((-1.0)*cj1*x302))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306))))+IKsqr(((5.41666666666667)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+((sj1*x302))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((17.3333333333333)+(((-1.0)*cj1*x302))+(((-1.0)*x305*x306))+(((-1.0)*x304*x306))), ((5.41666666666667)+(((-1.0)*x303*x305))+(((-1.0)*x303*x304))+((sj1*x302))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x307=IKcos(j2);
IkReal x308=IKsin(j2);
IkReal x309=py*py;
IkReal x310=px*px;
IkReal x311=pz*pz;
IkReal x312=((1.0)*cj1);
IkReal x313=(py*sj1);
IkReal x314=(r01*sj0);
IkReal x315=(cj0*r00);
IkReal x316=(r02*sj1);
IkReal x317=((2.0)*pz);
IkReal x318=(cj0*px);
IkReal x319=(px*sj0);
IkReal x320=(cj1*r00);
IkReal x321=(pz*sj0);
IkReal x322=((0.065)*r02);
IkReal x323=((2.0)*py);
IkReal x324=(r00*sj0);
IkReal x325=((0.065)*pz);
IkReal x326=(cj0*r01);
IkReal x327=(py*r01);
IkReal x328=((0.00676)*sj1);
IkReal x329=(cj1*r02);
IkReal x330=((0.208)*pz);
IkReal x331=(px*r00);
IkReal x332=(py*sj0);
IkReal x333=((1.0)*sj1);
IkReal x334=((0.00975975)*sj1);
IkReal x335=(px*r01);
IkReal x336=((0.00975975)*cj1);
IkReal x337=((0.00676)*cj1);
IkReal x338=((0.208)*r02);
IkReal x339=(cj4*x307);
IkReal x340=((0.006)*x308);
IkReal x341=((0.006)*x307);
IkReal x342=(cj4*x308);
evalcond[0]=((((-1.0)*x312*x314))+(((-1.0)*x312*x315))+x316+x342);
evalcond[1]=((0.0325)+(((-1.0)*x312*x318))+((pz*sj1))+(((-1.0)*x341))+(((-1.0)*x312*x332)));
evalcond[2]=((((-1.0)*r02*x312))+(((-1.0)*x339))+(((-1.0)*x315*x333))+(((-1.0)*x314*x333)));
evalcond[3]=((0.104)+(((-1.0)*x318*x333))+(((-1.0)*pz*x312))+(((-1.0)*x340))+(((-1.0)*sj0*x313)));
evalcond[4]=((((0.104)*x326))+(((-1.0)*r02*x312*x319))+(((-1.0)*x333*x335))+((x320*x321))+(((-0.104)*x324))+((cj0*py*x329))+((r00*x313))+((sj4*x340))+(((-1.0)*pz*x312*x326)));
evalcond[5]=((((-1.0)*pz*x326*x333))+((cj1*x335))+(((-1.0)*py*r00*x312))+(((-1.0)*x316*x319))+(((-0.0325)*x326))+(((0.0325)*x324))+(((-1.0)*sj4*x341))+((cj0*r02*x313))+((r00*sj1*x321)));
evalcond[6]=((((-1.0)*sj1*x317*x331))+((x317*x329*x332))+(((-1.0)*x311*x312*x314))+(((-1.0)*x311*x312*x315))+(((-1.0)*x310*x312*x314))+((x310*x316))+(((3.6e-5)*x342))+(((-0.065)*x331))+(((0.00676)*x329))+(((-1.0)*x318*x338))+((x319*x320*x323))+(((-0.065)*x327))+((x309*x316))+((cj1*r01*x318*x323))+((x314*x328))+(((-1.0)*x315*x336))+(((-1.0)*r01*x313*x317))+((x315*x330))+((x315*x328))+((cj1*x309*x314))+(((-1.0)*x311*x316))+(((0.00975975)*x316))+((x314*x330))+(((-1.0)*x332*x338))+(((-1.0)*x314*x336))+((cj1*x310*x315))+(((-1.0)*pz*x322))+((x317*x318*x329))+(((-1.0)*x309*x312*x315)));
evalcond[7]=(((x318*x322))+(((0.00975975)*x329))+((x316*x317*x318))+(((-1.0)*x310*x314*x333))+(((-1.0)*x309*x315*x333))+(((-1.0)*x311*x315*x333))+(((2.0)*r00*x313*x319))+(((-0.208)*x327))+(((-1.0)*x311*x314*x333))+(((-0.00676)*x316))+(((-1.0)*x314*x325))+((sj1*x310*x315))+(((-1.0)*r02*x310*x312))+((px*x317*x320))+(((-3.6e-5)*x339))+(((-1.0)*x315*x325))+(((-0.208)*x331))+((r02*sj0*x313*x317))+(((-1.0)*r02*x330))+((sj1*x309*x314))+(((-1.0)*r02*x309*x312))+((x315*x337))+((x315*x334))+((x314*x337))+((x314*x334))+(((2.0)*r01*x313*x318))+((x311*x329))+((x322*x332))+((cj1*x317*x327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(cj4,-1);
if(!x354.valid){
continue;
}
IkReal x343=x354.value;
IkReal x344=((100.0)*cj4);
IkReal x345=(pz*sj1);
IkReal x346=(cj1*r02);
IkReal x347=((3.25)*cj4);
IkReal x348=((10.4)*sj1);
IkReal x349=(cj1*py*sj0);
IkReal x350=((-0.0961538461538462)*x343);
IkReal x351=(cj0*cj1*px);
IkReal x352=((11.0)*cj0*r00*sj1);
IkReal x353=((11.0)*r01*sj0*sj1);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(sj3,-1);
if(!x355.valid){
continue;
}
if( IKabs((x350*(x355.value)*((((cj3*x352))+((cj3*x353))+((cj0*r00*x348))+(((11.0)*cj3*x346))+((cj3*x344*x345))+(((-1.0)*cj3*x344*x349))+((r01*sj0*x348))+(((-1.0)*cj3*x344*x351))+(((10.4)*x346))+((cj3*x347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x350*(((((11.0)*x346))+x353+x352+x347+(((-1.0)*x344*x349))+((x344*x345))+(((-1.0)*x344*x351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x350*(x355.value)*((((cj3*x352))+((cj3*x353))+((cj0*r00*x348))+(((11.0)*cj3*x346))+((cj3*x344*x345))+(((-1.0)*cj3*x344*x349))+((r01*sj0*x348))+(((-1.0)*cj3*x344*x351))+(((10.4)*x346))+((cj3*x347))))))+IKsqr((x350*(((((11.0)*x346))+x353+x352+x347+(((-1.0)*x344*x349))+((x344*x345))+(((-1.0)*x344*x351))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x350*(x355.value)*((((cj3*x352))+((cj3*x353))+((cj0*r00*x348))+(((11.0)*cj3*x346))+((cj3*x344*x345))+(((-1.0)*cj3*x344*x349))+((r01*sj0*x348))+(((-1.0)*cj3*x344*x351))+(((10.4)*x346))+((cj3*x347))))), (x350*(((((11.0)*x346))+x353+x352+x347+(((-1.0)*x344*x349))+((x344*x345))+(((-1.0)*x344*x351))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x356=IKcos(j2);
IkReal x357=IKsin(j2);
IkReal x358=pz*pz;
IkReal x359=py*py;
IkReal x360=px*px;
IkReal x361=((1.0)*cj1);
IkReal x362=(py*sj1);
IkReal x363=(r01*sj0);
IkReal x364=(cj3*cj4);
IkReal x365=(cj0*r00);
IkReal x366=(r02*sj1);
IkReal x367=((2.0)*pz);
IkReal x368=(cj0*px);
IkReal x369=(px*sj0);
IkReal x370=(cj1*r00);
IkReal x371=(pz*sj0);
IkReal x372=(cj1*r02);
IkReal x373=((0.065)*r02);
IkReal x374=((2.0)*py);
IkReal x375=(r00*sj0);
IkReal x376=((0.02288)*cj4);
IkReal x377=((0.065)*pz);
IkReal x378=(cj0*r01);
IkReal x379=(py*r01);
IkReal x380=((0.00676)*sj1);
IkReal x381=((0.208)*pz);
IkReal x382=(px*r00);
IkReal x383=((1.0)*sj1);
IkReal x384=((0.208)*r02);
IkReal x385=(py*sj0);
IkReal x386=((0.00975975)*sj1);
IkReal x387=((0.00975975)*cj1);
IkReal x388=(cj4*sj3);
IkReal x389=(px*r01);
IkReal x390=((0.00676)*cj1);
IkReal x391=((1.0)*x357);
IkReal x392=(sj4*x357);
IkReal x393=((0.11)*x356);
IkReal x394=((0.11)*x357);
IkReal x395=((0.104)*x356);
evalcond[0]=((((-1.0)*x361*x363))+(((-1.0)*x361*x365))+x366+(((-1.0)*x356*x388))+(((-1.0)*x364*x391)));
evalcond[1]=((((-1.0)*r02*x361))+(((-1.0)*x365*x383))+(((-1.0)*x388*x391))+((x356*x364))+(((-1.0)*x363*x383)));
evalcond[2]=((0.0325)+(((-1.0)*x361*x368))+(((-1.0)*sj3*x394))+x395+((cj3*x393))+(((-1.0)*x361*x385))+((pz*sj1)));
evalcond[3]=((0.104)+(((-1.0)*sj0*x362))+((sj3*x393))+((cj3*x394))+(((-1.0)*pz*x361))+(((-1.0)*x368*x383))+(((0.104)*x357)));
evalcond[4]=(((x370*x371))+(((-1.0)*sj3*sj4*x393))+((r00*x362))+(((-0.104)*x392))+(((0.104)*x378))+(((-0.104)*x375))+(((-1.0)*r02*x361*x369))+(((-0.11)*cj3*x392))+(((-1.0)*pz*x361*x378))+((cj0*py*x372))+(((-1.0)*x383*x389)));
evalcond[5]=((((0.0325)*x375))+((cj0*r02*x362))+(((-1.0)*py*r00*x361))+((cj1*x389))+(((-1.0)*x366*x369))+((cj3*sj4*x393))+(((-1.0)*pz*x378*x383))+((r00*sj1*x371))+(((-0.0325)*x378))+(((-0.11)*sj3*x392))+((sj4*x395)));
evalcond[6]=(((cj1*x367*x379))+(((0.022916)*x356*x364))+(((-1.0)*x363*x377))+((x358*x372))+(((-1.0)*x360*x363*x383))+((x373*x385))+(((2.0)*r01*x362*x368))+(((-1.0)*x358*x365*x383))+((x365*x390))+(((-0.208)*x382))+((x363*x386))+(((-1.0)*x358*x363*x383))+((x356*x376))+(((2.0)*r00*x362*x369))+((r02*sj0*x362*x367))+(((0.00975975)*x372))+(((-1.0)*x359*x365*x383))+(((-1.0)*r02*x360*x361))+((sj1*x359*x363))+(((-0.001284)*x357*x388))+((x365*x386))+(((-0.208)*x379))+(((-1.0)*r02*x381))+((x368*x373))+((x363*x390))+((sj1*x360*x365))+(((-0.00676)*x366))+((px*x367*x370))+((x366*x367*x368))+(((-1.0)*x365*x377))+(((-1.0)*r02*x359*x361)));
evalcond[7]=((((-0.065)*x382))+((x367*x368*x372))+(((-0.022916)*x357*x364))+((x367*x372*x385))+(((-1.0)*x365*x387))+(((-1.0)*x358*x366))+((x369*x370*x374))+((x363*x380))+((x363*x381))+((x359*x366))+(((-1.0)*x384*x385))+(((-0.065)*x379))+((cj1*r01*x368*x374))+(((-0.001284)*x356*x388))+(((0.00975975)*x366))+(((-1.0)*x360*x361*x363))+(((-1.0)*x363*x387))+((cj1*x359*x363))+((x365*x381))+((x365*x380))+(((-1.0)*sj1*x367*x382))+(((-1.0)*pz*x373))+(((0.00676)*x372))+(((-1.0)*x358*x361*x365))+(((-1.0)*x358*x361*x363))+(((-1.0)*x368*x384))+((x360*x366))+(((-1.0)*r01*x362*x367))+(((-1.0)*x359*x361*x365))+(((-1.0)*x357*x376))+((cj1*x360*x365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x396=(cj1*sj3);
IkReal x397=((100.0)*cj4);
IkReal x398=(py*sj0);
IkReal x399=(cj0*r00);
IkReal x400=((10.4)*cj1);
IkReal x401=(cj3*cj4);
IkReal x402=(cj0*px);
IkReal x403=(r01*sj0);
IkReal x404=(cj1*cj3);
IkReal x405=(pz*sj1);
IkReal x406=((11.0)*r02*sj1);
CheckValue<IkReal> x407=IKPowWithIntegerCheck(IKsign(((((11.0)*cj4))+(((10.4)*x401)))),-1);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408 = IKatan2WithCheck(IkReal((((sj3*x397*x405))+(((-1.0)*x396*x397*x398))+(((3.25)*cj4*sj3))+(((10.4)*r02*sj1))+(((-1.0)*x400*x403))+(((-1.0)*x399*x400))+(((-1.0)*x396*x397*x402))+(((-11.0)*x403*x404))+((cj3*x406))+(((-11.0)*x399*x404)))),IkReal(((((-11.0)*x396*x399))+(((-1.0)*cj3*x397*x405))+((sj3*x406))+(((-3.25)*x401))+((x397*x402*x404))+(((-11.0)*x396*x403))+((x397*x398*x404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x408.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x407.value)))+(x408.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x409=IKcos(j2);
IkReal x410=IKsin(j2);
IkReal x411=pz*pz;
IkReal x412=py*py;
IkReal x413=px*px;
IkReal x414=((1.0)*cj1);
IkReal x415=(py*sj1);
IkReal x416=(r01*sj0);
IkReal x417=(cj3*cj4);
IkReal x418=(cj0*r00);
IkReal x419=(r02*sj1);
IkReal x420=((2.0)*pz);
IkReal x421=(cj0*px);
IkReal x422=(px*sj0);
IkReal x423=(cj1*r00);
IkReal x424=(pz*sj0);
IkReal x425=(cj1*r02);
IkReal x426=((0.065)*r02);
IkReal x427=((2.0)*py);
IkReal x428=(r00*sj0);
IkReal x429=((0.02288)*cj4);
IkReal x430=((0.065)*pz);
IkReal x431=(cj0*r01);
IkReal x432=(py*r01);
IkReal x433=((0.00676)*sj1);
IkReal x434=((0.208)*pz);
IkReal x435=(px*r00);
IkReal x436=((1.0)*sj1);
IkReal x437=((0.208)*r02);
IkReal x438=(py*sj0);
IkReal x439=((0.00975975)*sj1);
IkReal x440=((0.00975975)*cj1);
IkReal x441=(cj4*sj3);
IkReal x442=(px*r01);
IkReal x443=((0.00676)*cj1);
IkReal x444=((1.0)*x410);
IkReal x445=(sj4*x410);
IkReal x446=((0.11)*x409);
IkReal x447=((0.11)*x410);
IkReal x448=((0.104)*x409);
evalcond[0]=((((-1.0)*x409*x441))+x419+(((-1.0)*x414*x416))+(((-1.0)*x414*x418))+(((-1.0)*x417*x444)));
evalcond[1]=((((-1.0)*x416*x436))+(((-1.0)*r02*x414))+((x409*x417))+(((-1.0)*x418*x436))+(((-1.0)*x441*x444)));
evalcond[2]=((0.0325)+(((-1.0)*sj3*x447))+x448+((cj3*x446))+(((-1.0)*x414*x438))+((pz*sj1))+(((-1.0)*x414*x421)));
evalcond[3]=((0.104)+(((-1.0)*x421*x436))+(((0.104)*x410))+((sj3*x446))+((cj3*x447))+(((-1.0)*pz*x414))+(((-1.0)*sj0*x415)));
evalcond[4]=((((0.104)*x431))+(((-0.11)*cj3*x445))+(((-0.104)*x445))+(((-0.104)*x428))+(((-1.0)*sj3*sj4*x446))+(((-1.0)*x436*x442))+((r00*x415))+(((-1.0)*r02*x414*x422))+((x423*x424))+(((-1.0)*pz*x414*x431))+((cj0*py*x425)));
evalcond[5]=((((-0.11)*sj3*x445))+(((0.0325)*x428))+((sj4*x448))+((cj1*x442))+(((-0.0325)*x431))+((r00*sj1*x424))+(((-1.0)*pz*x431*x436))+((cj0*r02*x415))+(((-1.0)*py*r00*x414))+(((-1.0)*x419*x422))+((cj3*sj4*x446)));
evalcond[6]=((((-0.208)*x435))+(((-0.208)*x432))+(((-1.0)*r02*x413*x414))+(((0.00975975)*x425))+(((-1.0)*x412*x418*x436))+(((-1.0)*x411*x416*x436))+((sj1*x413*x418))+(((-1.0)*x416*x430))+((x426*x438))+((x416*x443))+((x411*x425))+((x416*x439))+(((-1.0)*r02*x412*x414))+(((-0.00676)*x419))+(((0.022916)*x409*x417))+(((-0.001284)*x410*x441))+((x409*x429))+(((2.0)*r00*x415*x422))+(((2.0)*r01*x415*x421))+((x418*x439))+(((-1.0)*r02*x434))+(((-1.0)*x411*x418*x436))+((x418*x443))+(((-1.0)*x413*x416*x436))+((r02*sj0*x415*x420))+((sj1*x412*x416))+((x419*x420*x421))+(((-1.0)*x418*x430))+((cj1*x420*x432))+((x421*x426))+((px*x420*x423)));
evalcond[7]=((((-1.0)*x437*x438))+(((-1.0)*x411*x414*x416))+(((-1.0)*x411*x414*x418))+((cj1*x413*x418))+(((-1.0)*x421*x437))+(((-0.001284)*x409*x441))+(((-0.065)*x432))+(((-0.065)*x435))+((x413*x419))+((x416*x434))+((x416*x433))+(((-0.022916)*x410*x417))+(((-1.0)*x416*x440))+(((-1.0)*r01*x415*x420))+(((0.00975975)*x419))+(((-1.0)*x411*x419))+((x420*x421*x425))+((x418*x434))+((x418*x433))+((cj1*x412*x416))+(((-1.0)*x412*x414*x418))+((x412*x419))+(((0.00676)*x425))+((cj1*r01*x421*x427))+((x422*x423*x427))+(((-1.0)*x413*x414*x416))+(((-1.0)*x410*x429))+(((-1.0)*pz*x426))+((x420*x425*x438))+(((-1.0)*sj1*x420*x435))+(((-1.0)*x418*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x449=((1.0)*cj1);
IkReal x450=(cj0*r00);
IkReal x451=(r02*sj1);
IkReal x452=((1.0)*sj1);
IkReal x453=(cj3*r01*sj0);
IkReal x454=(r01*sj0*sj3);
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal((((cj3*x451))+(((-1.0)*r02*sj3*x449))+(((-1.0)*x452*x454))+(((-1.0)*x449*x453))+(((-1.0)*sj3*x450*x452))+(((-1.0)*cj3*x449*x450)))),IkReal((((sj3*x451))+((sj1*x453))+((cj3*sj1*x450))+(((-1.0)*sj3*x449*x450))+((cj1*cj3*r02))+(((-1.0)*x449*x454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
CheckValue<IkReal> x456=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x456.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x455.value)+(((1.5707963267949)*(x456.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x457=IKcos(j2);
IkReal x458=IKsin(j2);
IkReal x459=pz*pz;
IkReal x460=py*py;
IkReal x461=px*px;
IkReal x462=((1.0)*cj1);
IkReal x463=(py*sj1);
IkReal x464=(r01*sj0);
IkReal x465=(cj3*cj4);
IkReal x466=(cj0*r00);
IkReal x467=(r02*sj1);
IkReal x468=((2.0)*pz);
IkReal x469=(cj0*px);
IkReal x470=(px*sj0);
IkReal x471=(cj1*r00);
IkReal x472=(pz*sj0);
IkReal x473=(cj1*r02);
IkReal x474=((0.065)*r02);
IkReal x475=((2.0)*py);
IkReal x476=(r00*sj0);
IkReal x477=((0.02288)*cj4);
IkReal x478=((0.065)*pz);
IkReal x479=(cj0*r01);
IkReal x480=(py*r01);
IkReal x481=((0.00676)*sj1);
IkReal x482=((0.208)*pz);
IkReal x483=(px*r00);
IkReal x484=((1.0)*sj1);
IkReal x485=((0.208)*r02);
IkReal x486=(py*sj0);
IkReal x487=((0.00975975)*sj1);
IkReal x488=((0.00975975)*cj1);
IkReal x489=(cj4*sj3);
IkReal x490=(px*r01);
IkReal x491=((0.00676)*cj1);
IkReal x492=((1.0)*x458);
IkReal x493=(sj4*x458);
IkReal x494=((0.11)*x457);
IkReal x495=((0.11)*x458);
IkReal x496=((0.104)*x457);
evalcond[0]=((((-1.0)*x462*x464))+(((-1.0)*x462*x466))+(((-1.0)*x465*x492))+x467+(((-1.0)*x457*x489)));
evalcond[1]=((((-1.0)*x489*x492))+(((-1.0)*x464*x484))+(((-1.0)*x466*x484))+(((-1.0)*r02*x462))+((x457*x465)));
evalcond[2]=((0.0325)+(((-1.0)*x462*x469))+(((-1.0)*sj3*x495))+x496+((pz*sj1))+((cj3*x494))+(((-1.0)*x462*x486)));
evalcond[3]=((0.104)+(((0.104)*x458))+(((-1.0)*sj0*x463))+(((-1.0)*x469*x484))+(((-1.0)*pz*x462))+((sj3*x494))+((cj3*x495)));
evalcond[4]=(((x471*x472))+(((-1.0)*pz*x462*x479))+(((-0.11)*cj3*x493))+(((-0.104)*x493))+(((-0.104)*x476))+((cj0*py*x473))+(((-1.0)*r02*x462*x470))+(((-1.0)*x484*x490))+(((0.104)*x479))+((r00*x463))+(((-1.0)*sj3*sj4*x494)));
evalcond[5]=(((sj4*x496))+(((-1.0)*pz*x479*x484))+(((-0.11)*sj3*x493))+(((-1.0)*py*r00*x462))+((cj3*sj4*x494))+(((-0.0325)*x479))+(((-1.0)*x467*x470))+((cj1*x490))+((r00*sj1*x472))+(((0.0325)*x476))+((cj0*r02*x463)));
evalcond[6]=((((-0.001284)*x458*x489))+((x459*x473))+(((-1.0)*r02*x460*x462))+((x469*x474))+((px*x468*x471))+(((-1.0)*x459*x464*x484))+((cj1*x468*x480))+(((2.0)*r01*x463*x469))+((x464*x491))+(((2.0)*r00*x463*x470))+(((-0.208)*x483))+(((-0.208)*x480))+((sj1*x460*x464))+((x464*x487))+((r02*sj0*x463*x468))+((x474*x486))+(((-1.0)*x464*x478))+(((-1.0)*r02*x461*x462))+(((-0.00676)*x467))+(((0.022916)*x457*x465))+((x466*x487))+((x467*x468*x469))+((x466*x491))+(((-1.0)*x466*x478))+(((-1.0)*x460*x466*x484))+((x457*x477))+(((-1.0)*x461*x464*x484))+((sj1*x461*x466))+(((0.00975975)*x473))+(((-1.0)*x459*x466*x484))+(((-1.0)*r02*x482)));
evalcond[7]=(((cj1*x460*x464))+(((-0.022916)*x458*x465))+(((-1.0)*x459*x467))+((x461*x467))+((x470*x471*x475))+(((-1.0)*x460*x462*x466))+(((0.00676)*x473))+(((-1.0)*x464*x488))+(((-1.0)*x466*x488))+(((-1.0)*pz*x474))+((x468*x469*x473))+(((-0.001284)*x457*x489))+((x464*x481))+((x464*x482))+(((-1.0)*x469*x485))+(((-1.0)*sj1*x468*x483))+((cj1*x461*x466))+(((-1.0)*x459*x462*x464))+(((-1.0)*x459*x462*x466))+((x460*x467))+(((-1.0)*r01*x463*x468))+(((0.00975975)*x467))+(((-1.0)*x458*x477))+((x468*x473*x486))+((x466*x482))+((x466*x481))+((cj1*r01*x469*x475))+(((-1.0)*x461*x462*x464))+(((-0.065)*x480))+(((-0.065)*x483))+(((-1.0)*x485*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x497=(cj0*cj1);
IkReal x498=((13.0)*sj1);
IkReal x499=(r01*sj0);
IkReal x500=((9.09090909090909)*sj1);
IkReal x501=(py*sj0);
CheckValue<IkReal> x502=IKPowWithIntegerCheck(cj4,-1);
if(!x502.valid){
continue;
}
if( IKabs(((0.0769230769230769)*(x502.value)*(((((-125.0)*px*r00))+(((-125.0)*py*r01))+(((4.0625)*cj1*x499))+(((4.0625)*r00*x497))+(((-4.0625)*r02*sj1))+((x498*x499))+(((13.0)*cj1*r02))+((cj0*r00*x498))+(((-125.0)*pz*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.482681381118881)+(((43.7062937062937)*(py*py)))+(((-2.84090909090909)*cj1*x501))+(((2.84090909090909)*pz*sj1))+(((-2.84090909090909)*px*x497))+(((-1.0)*cj0*px*x500))+(((-9.09090909090909)*cj1*pz))+(((43.7062937062937)*(px*px)))+(((43.7062937062937)*(pz*pz)))+(((-1.0)*x500*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0769230769230769)*(x502.value)*(((((-125.0)*px*r00))+(((-125.0)*py*r01))+(((4.0625)*cj1*x499))+(((4.0625)*r00*x497))+(((-4.0625)*r02*sj1))+((x498*x499))+(((13.0)*cj1*r02))+((cj0*r00*x498))+(((-125.0)*pz*r02))))))+IKsqr(((-0.482681381118881)+(((43.7062937062937)*(py*py)))+(((-2.84090909090909)*cj1*x501))+(((2.84090909090909)*pz*sj1))+(((-2.84090909090909)*px*x497))+(((-1.0)*cj0*px*x500))+(((-9.09090909090909)*cj1*pz))+(((43.7062937062937)*(px*px)))+(((43.7062937062937)*(pz*pz)))+(((-1.0)*x500*x501))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0769230769230769)*(x502.value)*(((((-125.0)*px*r00))+(((-125.0)*py*r01))+(((4.0625)*cj1*x499))+(((4.0625)*r00*x497))+(((-4.0625)*r02*sj1))+((x498*x499))+(((13.0)*cj1*r02))+((cj0*r00*x498))+(((-125.0)*pz*r02))))), ((-0.482681381118881)+(((43.7062937062937)*(py*py)))+(((-2.84090909090909)*cj1*x501))+(((2.84090909090909)*pz*sj1))+(((-2.84090909090909)*px*x497))+(((-1.0)*cj0*px*x500))+(((-9.09090909090909)*cj1*pz))+(((43.7062937062937)*(px*px)))+(((43.7062937062937)*(pz*pz)))+(((-1.0)*x500*x501))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x503=IKcos(j3);
IkReal x504=px*px;
IkReal x505=pz*pz;
IkReal x506=py*py;
IkReal x507=(px*r01);
IkReal x508=(py*sj0);
IkReal x509=(r00*sj0);
IkReal x510=((0.065)*cj1);
IkReal x511=(r00*sj1);
IkReal x512=((0.0325)*cj0);
IkReal x513=(py*r00);
IkReal x514=((0.208)*sj1);
IkReal x515=((0.104)*r02);
IkReal x516=(r01*sj0);
IkReal x517=((1.0)*pz);
IkReal x518=((0.208)*py);
IkReal x519=(cj0*r01);
IkReal x520=((0.104)*cj1);
IkReal x521=(cj0*r00);
IkReal x522=(cj0*px);
IkReal x523=(cj0*py);
IkReal x524=((0.0325)*cj1);
IkReal x525=(px*sj0);
IkReal x526=((0.0325)*sj1);
IkReal x527=((0.104)*cj4);
IkReal x528=(cj1*r02);
IkReal x529=((0.065)*pz*sj1);
IkReal x530=((1.0)*x505);
IkReal x531=((0.208)*cj1*pz);
IkReal x532=((0.065)*r02*sj1);
IkReal x533=((0.02288)*x503);
IkReal x534=((1.0)*x506);
IkReal x535=((2.0)*pz*r02);
evalcond[0]=((((-1.0)*px*r00))+((x516*x524))+(((-1.0)*x527*(IKsin(j3))))+(((-1.0)*r02*x526))+((cj1*x515))+(((-1.0)*r02*x517))+(((-1.0)*py*r01))+(((0.104)*cj0*x511))+((cj1*r00*x512))+(((0.104)*sj1*x516)));
evalcond[1]=((0.01104375)+(((-1.0)*x534))+(((-1.0)*x530))+(((-1.0)*x529))+x531+x533+((x514*x522))+((x510*x522))+(((-1.0)*x504))+((x508*x510))+((x508*x514)));
evalcond[2]=((((-1.0)*x511*x512))+((r02*x522))+(((-0.11)*cj4))+((x516*x520))+(((-1.0)*x503*x527))+(((-1.0)*sj1*x515))+(((-1.0)*r02*x524))+(((-1.0)*x516*x517))+(((-1.0)*x517*x521))+((x520*x521))+(((-1.0)*x516*x526))+((r02*x508)));
evalcond[3]=((((2.0)*x507*x508))+((x511*x518))+(((-0.208)*x525*x528))+((x510*x513))+((x519*x529))+(((-0.01187225)*x509))+(((-1.0)*x523*x532))+(((-1.0)*x523*x535))+((x504*x519))+((x509*x531))+(((0.022916)*sj4))+(((-2.0)*x513*x522))+((x525*x532))+((x525*x535))+(((-1.0)*x509*x529))+(((-1.0)*x509*x534))+(((-1.0)*x509*x530))+(((0.01187225)*x519))+((cj0*x518*x528))+((x505*x519))+((x504*x509))+((sj4*x533))+(((-1.0)*x507*x510))+(((-1.0)*x507*x514))+(((-1.0)*x519*x531))+(((-1.0)*x519*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x536=(cj3*cj4);
j2eval[0]=((((1.05769230769231)*cj4))+x536);
j2eval[1]=IKsign(((((11.0)*cj4))+(((10.4)*x536))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x537=((1040.0)*cj1);
IkReal x538=(cj0*px);
IkReal x539=((1100.0)*sj3);
IkReal x540=(cj1*pz);
IkReal x541=((1040.0)*sj1);
IkReal x542=((1100.0)*cj3);
IkReal x543=((1040.0)*py*sj0);
IkReal x544=((1100.0)*pz*sj1);
IkReal x545=(py*sj0*sj1);
IkReal x546=(cj1*py*sj0);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((-108.16)+((pz*x537))+((pz*sj1*x539))+(((-1.0)*x539*x546))+((x542*x545))+((x540*x542))+((sj1*x538*x542))+((py*sj0*x541))+((x538*x541))+(((35.75)*sj3))+(((-114.4)*cj3))+(((-1.0)*cj1*x538*x539)))),IkReal(((-33.8)+((x539*x545))+((x539*x540))+((x542*x546))+(((-35.75)*cj3))+((sj1*x538*x539))+((cj1*x538*x542))+((x537*x538))+(((-1.0)*pz*sj1*x542))+((py*sj0*x537))+(((-1.0)*pz*x541))+(((-114.4)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x548.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x547.value)+(((1.5707963267949)*(x548.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x549=IKcos(j2);
IkReal x550=IKsin(j2);
IkReal x551=((1.0)*cj1);
IkReal x552=(py*sj1);
IkReal x553=(cj0*r02);
IkReal x554=(sj0*sj1);
IkReal x555=(pz*r00);
IkReal x556=((0.11)*cj3);
IkReal x557=(px*r02);
IkReal x558=(cj0*pz);
IkReal x559=(r00*sj0);
IkReal x560=((0.11)*sj3);
IkReal x561=(cj0*r01);
IkReal x562=(cj0*px);
IkReal x563=((0.104)*x550);
IkReal x564=((0.104)*x549);
IkReal x565=((1.0)*r01*sj1);
IkReal x566=(x550*x556);
IkReal x567=(x549*x560);
IkReal x568=(x549*x556);
IkReal x569=(x550*x560);
IkReal x570=(x568+x564);
IkReal x571=(x566+x567+x563);
evalcond[0]=((0.0325)+(((-1.0)*py*sj0*x551))+x570+((pz*sj1))+(((-1.0)*x551*x562))+(((-1.0)*x569)));
evalcond[1]=((0.104)+(((-1.0)*sj1*x562))+(((-1.0)*sj0*x552))+x571+(((-1.0)*pz*x551)));
evalcond[2]=((((-1.0)*r01*x551*x558))+(((-1.0)*sj0*x551*x557))+(((0.104)*x561))+((cj1*sj0*x555))+(((-0.104)*x559))+(((-1.0)*x571))+((r00*x552))+((cj1*py*x553))+(((-1.0)*px*x565)));
evalcond[3]=((((-0.0325)*x561))+(((0.0325)*x559))+(((-1.0)*x558*x565))+(((-1.0)*x554*x557))+((x554*x555))+(((-1.0)*py*r00*x551))+x570+((x552*x553))+((cj1*px*r01))+(((-1.0)*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x572=((1040.0)*cj1);
IkReal x573=(cj0*px);
IkReal x574=((1100.0)*sj3);
IkReal x575=(cj1*pz);
IkReal x576=((1040.0)*sj1);
IkReal x577=((1100.0)*cj3);
IkReal x578=((1040.0)*py*sj0);
IkReal x579=((1100.0)*pz*sj1);
IkReal x580=(py*sj0*sj1);
IkReal x581=(cj1*py*sj0);
CheckValue<IkReal> x582=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(((-108.16)+((x577*x580))+((pz*x572))+((x575*x577))+((x573*x576))+((pz*sj1*x574))+((py*sj0*x576))+(((-1.0)*x574*x581))+(((35.75)*sj3))+((sj1*x573*x577))+(((-114.4)*cj3))+(((-1.0)*cj1*x573*x574)))),IkReal(((-33.8)+((x577*x581))+(((-35.75)*cj3))+((x574*x575))+((cj1*x573*x577))+((x574*x580))+(((-1.0)*pz*x576))+(((-1.0)*pz*sj1*x577))+((py*sj0*x572))+((x572*x573))+(((-114.4)*sj3))+((sj1*x573*x574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x582.value)))+(x583.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x584=IKcos(j2);
IkReal x585=IKsin(j2);
IkReal x586=((1.0)*cj1);
IkReal x587=(py*sj1);
IkReal x588=(cj0*r02);
IkReal x589=(sj0*sj1);
IkReal x590=(pz*r00);
IkReal x591=((0.11)*cj3);
IkReal x592=(px*r02);
IkReal x593=(cj0*pz);
IkReal x594=(r00*sj0);
IkReal x595=((0.11)*sj3);
IkReal x596=(cj0*r01);
IkReal x597=(cj0*px);
IkReal x598=((0.104)*x585);
IkReal x599=((0.104)*x584);
IkReal x600=((1.0)*r01*sj1);
IkReal x601=(x585*x591);
IkReal x602=(x584*x595);
IkReal x603=(x585*x595);
IkReal x604=(x584*x591);
IkReal x605=(x599+x604);
IkReal x606=(x598+x602+x601);
evalcond[0]=((0.0325)+(((-1.0)*x586*x597))+x605+(((-1.0)*x603))+((pz*sj1))+(((-1.0)*py*sj0*x586)));
evalcond[1]=((0.104)+(((-1.0)*pz*x586))+(((-1.0)*sj0*x587))+(((-1.0)*sj1*x597))+x606);
evalcond[2]=((((0.104)*x596))+((cj1*sj0*x590))+(((-0.104)*x594))+((cj1*py*x588))+(((-1.0)*sj0*x586*x592))+x606+(((-1.0)*r01*x586*x593))+((r00*x587))+(((-1.0)*px*x600)));
evalcond[3]=((((-1.0)*x593*x600))+(((-0.0325)*x596))+(((-1.0)*x589*x592))+((x587*x588))+(((-1.0)*py*r00*x586))+x603+(((-1.0)*x605))+((cj1*px*r01))+((x589*x590))+(((0.0325)*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x607=((4.67289719626168)*cj1);
IkReal x608=(py*sj0);
IkReal x609=(cj0*px);
IkReal x610=((4.67289719626168)*sj1);
if( IKabs(((-0.485981308411215)+((x608*x610))+((x609*x610))+((pz*x607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.151869158878505)+((x607*x609))+((x607*x608))+(((-1.0)*pz*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.485981308411215)+((x608*x610))+((x609*x610))+((pz*x607))))+IKsqr(((-0.151869158878505)+((x607*x609))+((x607*x608))+(((-1.0)*pz*x610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.485981308411215)+((x608*x610))+((x609*x610))+((pz*x607))), ((-0.151869158878505)+((x607*x609))+((x607*x608))+(((-1.0)*pz*x610))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x611=IKcos(j2);
IkReal x612=IKsin(j2);
IkReal x613=py*py;
IkReal x614=px*px;
IkReal x615=pz*pz;
IkReal x616=((1.0)*cj1);
IkReal x617=(py*sj1);
IkReal x618=(r01*sj0);
IkReal x619=(cj0*r00);
IkReal x620=(r02*sj1);
IkReal x621=((2.0)*pz);
IkReal x622=(cj0*px);
IkReal x623=(px*sj0);
IkReal x624=(cj1*r00);
IkReal x625=(pz*sj0);
IkReal x626=((0.065)*r02);
IkReal x627=((2.0)*py);
IkReal x628=(r00*sj0);
IkReal x629=((0.065)*pz);
IkReal x630=(cj0*r01);
IkReal x631=(py*r01);
IkReal x632=((0.00676)*sj1);
IkReal x633=(cj1*r02);
IkReal x634=((0.208)*pz);
IkReal x635=(px*r00);
IkReal x636=(py*sj0);
IkReal x637=((1.0)*sj1);
IkReal x638=((0.045796)*cj4);
IkReal x639=((0.00975975)*sj1);
IkReal x640=(px*r01);
IkReal x641=((0.00975975)*cj1);
IkReal x642=((0.00676)*cj1);
IkReal x643=((0.208)*r02);
IkReal x644=((0.214)*x612);
IkReal x645=((0.214)*x611);
evalcond[0]=((((-1.0)*cj4*x612))+x620+(((-1.0)*x616*x619))+(((-1.0)*x616*x618)));
evalcond[1]=((((-1.0)*x619*x637))+(((-1.0)*x618*x637))+((cj4*x611))+(((-1.0)*r02*x616)));
evalcond[2]=((0.0325)+x645+(((-1.0)*x616*x636))+((pz*sj1))+(((-1.0)*x616*x622)));
evalcond[3]=((0.104)+(((-1.0)*x622*x637))+(((-1.0)*sj0*x617))+(((-1.0)*pz*x616))+x644);
evalcond[4]=(((r00*x617))+(((-1.0)*sj4*x644))+(((-1.0)*r02*x616*x623))+(((-1.0)*pz*x616*x630))+((cj0*py*x633))+(((-0.104)*x628))+((x624*x625))+(((-1.0)*x637*x640))+(((0.104)*x630)));
evalcond[5]=((((-0.0325)*x630))+(((-1.0)*py*r00*x616))+(((-1.0)*pz*x630*x637))+((sj4*x645))+((cj1*x640))+(((-1.0)*x620*x623))+(((0.0325)*x628))+((r00*sj1*x625))+((cj0*r02*x617)));
evalcond[6]=((((-1.0)*pz*x626))+(((-1.0)*r01*x617*x621))+((x621*x633*x636))+((x614*x620))+(((-1.0)*x613*x616*x619))+(((-1.0)*x619*x641))+(((-0.065)*x635))+(((-0.065)*x631))+(((-1.0)*x618*x641))+((x619*x634))+((x619*x632))+(((-1.0)*sj1*x621*x635))+((x618*x632))+((x618*x634))+((cj1*r01*x622*x627))+((x613*x620))+((x621*x622*x633))+(((-1.0)*x614*x616*x618))+((x623*x624*x627))+(((-1.0)*x615*x620))+((cj1*x613*x618))+(((-1.0)*x612*x638))+(((0.00975975)*x620))+(((-1.0)*x636*x643))+(((0.00676)*x633))+(((-1.0)*x615*x616*x618))+(((-1.0)*x615*x616*x619))+((cj1*x614*x619))+(((-1.0)*x622*x643)));
evalcond[7]=((((-1.0)*x613*x619*x637))+((x618*x642))+((x615*x633))+(((2.0)*r01*x617*x622))+(((-1.0)*r02*x613*x616))+((sj1*x614*x619))+((x619*x639))+(((-1.0)*r02*x634))+((x618*x639))+((r02*sj0*x617*x621))+((cj1*x621*x631))+((sj1*x613*x618))+(((2.0)*r00*x617*x623))+((x611*x638))+(((-0.208)*x631))+(((-0.208)*x635))+(((-1.0)*x619*x629))+(((-1.0)*x615*x618*x637))+(((0.00975975)*x633))+(((-1.0)*x615*x619*x637))+((x620*x621*x622))+(((-1.0)*x618*x629))+(((-1.0)*x614*x618*x637))+((px*x621*x624))+((x619*x642))+(((-0.00676)*x620))+((x622*x626))+(((-1.0)*r02*x614*x616))+((x626*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x646=((166.666666666667)*pz);
IkReal x647=((166.666666666667)*cj1);
IkReal x648=(py*sj0);
IkReal x649=(cj0*px);
IkReal x650=((166.666666666667)*sj1);
if( IKabs(((17.3333333333333)+(((-1.0)*cj1*x646))+(((-1.0)*x649*x650))+(((-1.0)*x648*x650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.41666666666667)+((sj1*x646))+(((-1.0)*x647*x648))+(((-1.0)*x647*x649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.3333333333333)+(((-1.0)*cj1*x646))+(((-1.0)*x649*x650))+(((-1.0)*x648*x650))))+IKsqr(((5.41666666666667)+((sj1*x646))+(((-1.0)*x647*x648))+(((-1.0)*x647*x649))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((17.3333333333333)+(((-1.0)*cj1*x646))+(((-1.0)*x649*x650))+(((-1.0)*x648*x650))), ((5.41666666666667)+((sj1*x646))+(((-1.0)*x647*x648))+(((-1.0)*x647*x649))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x651=IKcos(j2);
IkReal x652=IKsin(j2);
IkReal x653=py*py;
IkReal x654=px*px;
IkReal x655=pz*pz;
IkReal x656=((1.0)*cj1);
IkReal x657=(py*sj1);
IkReal x658=(r01*sj0);
IkReal x659=(cj0*r00);
IkReal x660=(r02*sj1);
IkReal x661=((2.0)*pz);
IkReal x662=(cj0*px);
IkReal x663=(px*sj0);
IkReal x664=(cj1*r00);
IkReal x665=(pz*sj0);
IkReal x666=((0.065)*r02);
IkReal x667=((2.0)*py);
IkReal x668=(r00*sj0);
IkReal x669=((0.065)*pz);
IkReal x670=(cj0*r01);
IkReal x671=(py*r01);
IkReal x672=((0.00676)*sj1);
IkReal x673=(cj1*r02);
IkReal x674=((0.208)*pz);
IkReal x675=(px*r00);
IkReal x676=(py*sj0);
IkReal x677=((1.0)*sj1);
IkReal x678=((0.00975975)*sj1);
IkReal x679=(px*r01);
IkReal x680=((0.00975975)*cj1);
IkReal x681=((0.00676)*cj1);
IkReal x682=((0.208)*r02);
IkReal x683=(cj4*x651);
IkReal x684=((0.006)*x652);
IkReal x685=((0.006)*x651);
IkReal x686=(cj4*x652);
evalcond[0]=((((-1.0)*x656*x658))+(((-1.0)*x656*x659))+x660+x686);
evalcond[1]=((0.0325)+(((-1.0)*x685))+(((-1.0)*x656*x662))+((pz*sj1))+(((-1.0)*x656*x676)));
evalcond[2]=((((-1.0)*x659*x677))+(((-1.0)*x658*x677))+(((-1.0)*r02*x656))+(((-1.0)*x683)));
evalcond[3]=((0.104)+(((-1.0)*x684))+(((-1.0)*x662*x677))+(((-1.0)*sj0*x657))+(((-1.0)*pz*x656)));
evalcond[4]=((((-1.0)*r02*x656*x663))+((x664*x665))+(((-1.0)*pz*x656*x670))+((cj0*py*x673))+(((-0.104)*x668))+(((-1.0)*x677*x679))+((r00*x657))+((sj4*x684))+(((0.104)*x670)));
evalcond[5]=((((-1.0)*pz*x670*x677))+(((0.0325)*x668))+((r00*sj1*x665))+(((-0.0325)*x670))+(((-1.0)*x660*x663))+((cj0*r02*x657))+(((-1.0)*py*r00*x656))+(((-1.0)*sj4*x685))+((cj1*x679)));
evalcond[6]=((((-1.0)*r01*x657*x661))+(((0.00975975)*x660))+((x661*x673*x676))+((x659*x672))+((x659*x674))+(((-1.0)*x654*x656*x658))+(((-1.0)*x662*x682))+(((-1.0)*x658*x680))+(((-0.065)*x671))+(((-0.065)*x675))+(((-1.0)*x653*x656*x659))+(((-1.0)*x659*x680))+(((-1.0)*x655*x656*x659))+(((-1.0)*x655*x656*x658))+((x658*x672))+((x658*x674))+(((0.00676)*x673))+(((3.6e-5)*x686))+((x663*x664*x667))+((x654*x660))+(((-1.0)*pz*x666))+((x653*x660))+((cj1*r01*x662*x667))+(((-1.0)*sj1*x661*x675))+((cj1*x653*x658))+((cj1*x654*x659))+(((-1.0)*x676*x682))+(((-1.0)*x655*x660))+((x661*x662*x673)));
evalcond[7]=((((-1.0)*r02*x674))+((px*x661*x664))+((x659*x681))+((x658*x681))+(((-3.6e-5)*x683))+(((-1.0)*x659*x669))+(((-1.0)*x653*x659*x677))+(((-1.0)*r02*x653*x656))+((x662*x666))+((x659*x678))+(((2.0)*r00*x657*x663))+(((-1.0)*r02*x654*x656))+((x655*x673))+((x658*x678))+(((-1.0)*x658*x669))+((x666*x676))+((sj1*x654*x659))+(((-0.00676)*x660))+((sj1*x653*x658))+((r02*sj0*x657*x661))+((x660*x661*x662))+(((2.0)*r01*x657*x662))+(((-1.0)*x655*x658*x677))+(((-1.0)*x654*x658*x677))+(((-0.208)*x675))+(((-0.208)*x671))+(((-1.0)*x655*x659*x677))+(((0.00975975)*x673))+((cj1*x661*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x698=IKPowWithIntegerCheck(cj4,-1);
if(!x698.valid){
continue;
}
IkReal x687=x698.value;
IkReal x688=((100.0)*cj4);
IkReal x689=(pz*sj1);
IkReal x690=(cj1*r02);
IkReal x691=((3.25)*cj4);
IkReal x692=((10.4)*sj1);
IkReal x693=(cj1*py*sj0);
IkReal x694=((-0.0961538461538462)*x687);
IkReal x695=(cj0*cj1*px);
IkReal x696=((11.0)*cj0*r00*sj1);
IkReal x697=((11.0)*r01*sj0*sj1);
CheckValue<IkReal> x699=IKPowWithIntegerCheck(sj3,-1);
if(!x699.valid){
continue;
}
if( IKabs((x694*(x699.value)*(((((11.0)*cj3*x690))+(((10.4)*x690))+((cj0*r00*x692))+(((-1.0)*cj3*x688*x693))+(((-1.0)*cj3*x688*x695))+((r01*sj0*x692))+((cj3*x697))+((cj3*x696))+((cj3*x691))+((cj3*x688*x689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x694*(((((11.0)*x690))+((x688*x689))+(((-1.0)*x688*x693))+(((-1.0)*x688*x695))+x696+x697+x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x694*(x699.value)*(((((11.0)*cj3*x690))+(((10.4)*x690))+((cj0*r00*x692))+(((-1.0)*cj3*x688*x693))+(((-1.0)*cj3*x688*x695))+((r01*sj0*x692))+((cj3*x697))+((cj3*x696))+((cj3*x691))+((cj3*x688*x689))))))+IKsqr((x694*(((((11.0)*x690))+((x688*x689))+(((-1.0)*x688*x693))+(((-1.0)*x688*x695))+x696+x697+x691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x694*(x699.value)*(((((11.0)*cj3*x690))+(((10.4)*x690))+((cj0*r00*x692))+(((-1.0)*cj3*x688*x693))+(((-1.0)*cj3*x688*x695))+((r01*sj0*x692))+((cj3*x697))+((cj3*x696))+((cj3*x691))+((cj3*x688*x689))))), (x694*(((((11.0)*x690))+((x688*x689))+(((-1.0)*x688*x693))+(((-1.0)*x688*x695))+x696+x697+x691))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x700=IKcos(j2);
IkReal x701=IKsin(j2);
IkReal x702=pz*pz;
IkReal x703=py*py;
IkReal x704=px*px;
IkReal x705=((1.0)*cj1);
IkReal x706=(py*sj1);
IkReal x707=(r01*sj0);
IkReal x708=(cj3*cj4);
IkReal x709=(cj0*r00);
IkReal x710=(r02*sj1);
IkReal x711=((2.0)*pz);
IkReal x712=(cj0*px);
IkReal x713=(px*sj0);
IkReal x714=(cj1*r00);
IkReal x715=(pz*sj0);
IkReal x716=(cj1*r02);
IkReal x717=((0.065)*r02);
IkReal x718=((2.0)*py);
IkReal x719=(r00*sj0);
IkReal x720=((0.02288)*cj4);
IkReal x721=((0.065)*pz);
IkReal x722=(cj0*r01);
IkReal x723=(py*r01);
IkReal x724=((0.00676)*sj1);
IkReal x725=((0.208)*pz);
IkReal x726=(px*r00);
IkReal x727=((1.0)*sj1);
IkReal x728=((0.208)*r02);
IkReal x729=(py*sj0);
IkReal x730=((0.00975975)*sj1);
IkReal x731=((0.00975975)*cj1);
IkReal x732=(cj4*sj3);
IkReal x733=(px*r01);
IkReal x734=((0.00676)*cj1);
IkReal x735=((1.0)*x701);
IkReal x736=(sj4*x701);
IkReal x737=((0.11)*x700);
IkReal x738=((0.11)*x701);
IkReal x739=((0.104)*x700);
evalcond[0]=((((-1.0)*x708*x735))+(((-1.0)*x705*x707))+(((-1.0)*x705*x709))+x710+(((-1.0)*x700*x732)));
evalcond[1]=((((-1.0)*r02*x705))+(((-1.0)*x732*x735))+(((-1.0)*x709*x727))+((x700*x708))+(((-1.0)*x707*x727)));
evalcond[2]=((0.0325)+(((-1.0)*x705*x712))+((cj3*x737))+(((-1.0)*sj3*x738))+x739+((pz*sj1))+(((-1.0)*x705*x729)));
evalcond[3]=((0.104)+(((-1.0)*pz*x705))+(((-1.0)*sj0*x706))+((sj3*x737))+(((0.104)*x701))+((cj3*x738))+(((-1.0)*x712*x727)));
evalcond[4]=(((x714*x715))+(((-0.11)*cj3*x736))+(((-0.104)*x719))+(((-1.0)*x727*x733))+((r00*x706))+((cj0*py*x716))+(((0.104)*x722))+(((-1.0)*pz*x705*x722))+(((-1.0)*sj3*sj4*x737))+(((-1.0)*r02*x705*x713))+(((-0.104)*x736)));
evalcond[5]=(((cj0*r02*x706))+(((-1.0)*py*r00*x705))+((r00*sj1*x715))+(((-1.0)*x710*x713))+((cj3*sj4*x737))+(((0.0325)*x719))+(((-0.11)*sj3*x736))+((sj4*x739))+(((-0.0325)*x722))+((cj1*x733))+(((-1.0)*pz*x722*x727)));
evalcond[6]=((((0.00975975)*x716))+(((-1.0)*x702*x707*x727))+(((-1.0)*r02*x704*x705))+((x700*x720))+(((-1.0)*x709*x721))+((sj1*x703*x707))+((x702*x716))+(((-1.0)*r02*x725))+(((-1.0)*x702*x709*x727))+(((0.022916)*x700*x708))+((x707*x730))+((x707*x734))+((sj1*x704*x709))+((cj1*x711*x723))+((x709*x734))+((x709*x730))+((x717*x729))+(((-1.0)*x703*x709*x727))+((r02*sj0*x706*x711))+(((-1.0)*r02*x703*x705))+(((-0.00676)*x710))+(((2.0)*r01*x706*x712))+(((-0.208)*x726))+(((-0.208)*x723))+(((-0.001284)*x701*x732))+((x712*x717))+((x710*x711*x712))+(((-1.0)*x707*x721))+((px*x711*x714))+(((2.0)*r00*x706*x713))+(((-1.0)*x704*x707*x727)));
evalcond[7]=((((0.00975975)*x710))+(((-0.065)*x726))+(((-0.065)*x723))+(((-1.0)*pz*x717))+(((-1.0)*x701*x720))+(((-0.001284)*x700*x732))+(((-1.0)*x702*x710))+((x711*x712*x716))+(((0.00676)*x716))+(((-1.0)*x704*x705*x707))+(((-1.0)*x709*x731))+((x709*x725))+((x709*x724))+((x711*x716*x729))+((x703*x710))+((x707*x725))+((x707*x724))+(((-1.0)*r01*x706*x711))+(((-0.022916)*x701*x708))+(((-1.0)*sj1*x711*x726))+(((-1.0)*x702*x705*x709))+(((-1.0)*x702*x705*x707))+((cj1*r01*x712*x718))+((cj1*x704*x709))+((x704*x710))+((x713*x714*x718))+(((-1.0)*x707*x731))+((cj1*x703*x707))+(((-1.0)*x712*x728))+(((-1.0)*x728*x729))+(((-1.0)*x703*x705*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x740=(cj1*sj3);
IkReal x741=((100.0)*cj4);
IkReal x742=(py*sj0);
IkReal x743=(cj0*r00);
IkReal x744=((10.4)*cj1);
IkReal x745=(cj3*cj4);
IkReal x746=(cj0*px);
IkReal x747=(r01*sj0);
IkReal x748=(cj1*cj3);
IkReal x749=(pz*sj1);
IkReal x750=((11.0)*r02*sj1);
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((((-1.0)*x740*x741*x742))+(((-1.0)*x740*x741*x746))+(((3.25)*cj4*sj3))+(((10.4)*r02*sj1))+(((-11.0)*x747*x748))+(((-1.0)*x744*x747))+((cj3*x750))+((sj3*x741*x749))+(((-11.0)*x743*x748))+(((-1.0)*x743*x744)))),IkReal(((((-3.25)*x745))+(((-1.0)*cj3*x741*x749))+((x741*x746*x748))+(((-11.0)*x740*x747))+(((-11.0)*x740*x743))+((x741*x742*x748))+((sj3*x750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(((((11.0)*cj4))+(((10.4)*x745)))),-1);
if(!x752.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x751.value)+(((1.5707963267949)*(x752.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x753=IKcos(j2);
IkReal x754=IKsin(j2);
IkReal x755=pz*pz;
IkReal x756=py*py;
IkReal x757=px*px;
IkReal x758=((1.0)*cj1);
IkReal x759=(py*sj1);
IkReal x760=(r01*sj0);
IkReal x761=(cj3*cj4);
IkReal x762=(cj0*r00);
IkReal x763=(r02*sj1);
IkReal x764=((2.0)*pz);
IkReal x765=(cj0*px);
IkReal x766=(px*sj0);
IkReal x767=(cj1*r00);
IkReal x768=(pz*sj0);
IkReal x769=(cj1*r02);
IkReal x770=((0.065)*r02);
IkReal x771=((2.0)*py);
IkReal x772=(r00*sj0);
IkReal x773=((0.02288)*cj4);
IkReal x774=((0.065)*pz);
IkReal x775=(cj0*r01);
IkReal x776=(py*r01);
IkReal x777=((0.00676)*sj1);
IkReal x778=((0.208)*pz);
IkReal x779=(px*r00);
IkReal x780=((1.0)*sj1);
IkReal x781=((0.208)*r02);
IkReal x782=(py*sj0);
IkReal x783=((0.00975975)*sj1);
IkReal x784=((0.00975975)*cj1);
IkReal x785=(cj4*sj3);
IkReal x786=(px*r01);
IkReal x787=((0.00676)*cj1);
IkReal x788=((1.0)*x754);
IkReal x789=(sj4*x754);
IkReal x790=((0.11)*x753);
IkReal x791=((0.11)*x754);
IkReal x792=((0.104)*x753);
evalcond[0]=((((-1.0)*x758*x762))+(((-1.0)*x758*x760))+(((-1.0)*x761*x788))+x763+(((-1.0)*x753*x785)));
evalcond[1]=((((-1.0)*x762*x780))+(((-1.0)*r02*x758))+(((-1.0)*x760*x780))+(((-1.0)*x785*x788))+((x753*x761)));
evalcond[2]=((0.0325)+(((-1.0)*x758*x765))+x792+((pz*sj1))+(((-1.0)*sj3*x791))+((cj3*x790))+(((-1.0)*x758*x782)));
evalcond[3]=((0.104)+(((-1.0)*x765*x780))+(((0.104)*x754))+(((-1.0)*pz*x758))+((cj3*x791))+((sj3*x790))+(((-1.0)*sj0*x759)));
evalcond[4]=((((-1.0)*r02*x758*x766))+(((0.104)*x775))+(((-0.104)*x772))+(((-1.0)*sj3*sj4*x790))+((r00*x759))+(((-0.104)*x789))+(((-0.11)*cj3*x789))+((cj0*py*x769))+((x767*x768))+(((-1.0)*x780*x786))+(((-1.0)*pz*x758*x775)));
evalcond[5]=((((-0.0325)*x775))+((cj1*x786))+((cj3*sj4*x790))+(((0.0325)*x772))+((cj0*r02*x759))+(((-1.0)*pz*x775*x780))+((sj4*x792))+(((-1.0)*py*r00*x758))+((r00*sj1*x768))+(((-1.0)*x763*x766))+(((-0.11)*sj3*x789)));
evalcond[6]=((((0.022916)*x753*x761))+((r02*sj0*x759*x764))+((x770*x782))+((cj1*x764*x776))+(((2.0)*r01*x759*x765))+((sj1*x756*x760))+((x760*x783))+((x760*x787))+(((-1.0)*r02*x757*x758))+(((2.0)*r00*x759*x766))+(((-1.0)*x757*x760*x780))+(((-1.0)*r02*x756*x758))+((x763*x764*x765))+(((-0.208)*x779))+(((-0.208)*x776))+(((-1.0)*x755*x762*x780))+(((-1.0)*r02*x778))+(((-0.00676)*x763))+(((-0.001284)*x754*x785))+(((-1.0)*x756*x762*x780))+((px*x764*x767))+((x762*x787))+((x762*x783))+((x765*x770))+(((0.00975975)*x769))+(((-1.0)*x755*x760*x780))+((sj1*x757*x762))+(((-1.0)*x762*x774))+((x755*x769))+((x753*x773))+(((-1.0)*x760*x774)));
evalcond[7]=((((-1.0)*x762*x784))+((x757*x763))+(((-1.0)*x765*x781))+(((-0.001284)*x753*x785))+((cj1*x757*x762))+(((-1.0)*x754*x773))+((x766*x767*x771))+((x764*x765*x769))+(((0.00676)*x769))+(((-1.0)*x781*x782))+(((-0.022916)*x754*x761))+((cj1*x756*x760))+((x756*x763))+(((-1.0)*pz*x770))+(((-1.0)*x756*x758*x762))+(((0.00975975)*x763))+((x764*x769*x782))+(((-1.0)*x760*x784))+(((-0.065)*x776))+(((-0.065)*x779))+((x762*x777))+((x762*x778))+(((-1.0)*x755*x758*x760))+(((-1.0)*x755*x758*x762))+(((-1.0)*x757*x758*x760))+(((-1.0)*x755*x763))+(((-1.0)*sj1*x764*x779))+((cj1*r01*x765*x771))+((x760*x777))+((x760*x778))+(((-1.0)*r01*x759*x764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x793=((1.0)*cj1);
IkReal x794=(cj0*r00);
IkReal x795=(r02*sj1);
IkReal x796=((1.0)*sj1);
IkReal x797=(cj3*r01*sj0);
IkReal x798=(r01*sj0*sj3);
CheckValue<IkReal> x799=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800 = IKatan2WithCheck(IkReal(((((-1.0)*x796*x798))+(((-1.0)*x793*x797))+(((-1.0)*cj3*x793*x794))+(((-1.0)*sj3*x794*x796))+(((-1.0)*r02*sj3*x793))+((cj3*x795)))),IkReal(((((-1.0)*sj3*x793*x794))+((sj1*x797))+(((-1.0)*x793*x798))+((cj3*sj1*x794))+((cj1*cj3*r02))+((sj3*x795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x800.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x799.value)))+(x800.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x801=IKcos(j2);
IkReal x802=IKsin(j2);
IkReal x803=pz*pz;
IkReal x804=py*py;
IkReal x805=px*px;
IkReal x806=((1.0)*cj1);
IkReal x807=(py*sj1);
IkReal x808=(r01*sj0);
IkReal x809=(cj3*cj4);
IkReal x810=(cj0*r00);
IkReal x811=(r02*sj1);
IkReal x812=((2.0)*pz);
IkReal x813=(cj0*px);
IkReal x814=(px*sj0);
IkReal x815=(cj1*r00);
IkReal x816=(pz*sj0);
IkReal x817=(cj1*r02);
IkReal x818=((0.065)*r02);
IkReal x819=((2.0)*py);
IkReal x820=(r00*sj0);
IkReal x821=((0.02288)*cj4);
IkReal x822=((0.065)*pz);
IkReal x823=(cj0*r01);
IkReal x824=(py*r01);
IkReal x825=((0.00676)*sj1);
IkReal x826=((0.208)*pz);
IkReal x827=(px*r00);
IkReal x828=((1.0)*sj1);
IkReal x829=((0.208)*r02);
IkReal x830=(py*sj0);
IkReal x831=((0.00975975)*sj1);
IkReal x832=((0.00975975)*cj1);
IkReal x833=(cj4*sj3);
IkReal x834=(px*r01);
IkReal x835=((0.00676)*cj1);
IkReal x836=((1.0)*x802);
IkReal x837=(sj4*x802);
IkReal x838=((0.11)*x801);
IkReal x839=((0.11)*x802);
IkReal x840=((0.104)*x801);
evalcond[0]=((((-1.0)*x801*x833))+(((-1.0)*x806*x808))+(((-1.0)*x809*x836))+x811+(((-1.0)*x806*x810)));
evalcond[1]=((((-1.0)*x808*x828))+(((-1.0)*x833*x836))+(((-1.0)*r02*x806))+(((-1.0)*x810*x828))+((x801*x809)));
evalcond[2]=((0.0325)+(((-1.0)*x806*x830))+((cj3*x838))+((pz*sj1))+x840+(((-1.0)*x806*x813))+(((-1.0)*sj3*x839)));
evalcond[3]=((0.104)+(((0.104)*x802))+(((-1.0)*x813*x828))+(((-1.0)*sj0*x807))+((cj3*x839))+((sj3*x838))+(((-1.0)*pz*x806)));
evalcond[4]=(((x815*x816))+(((-1.0)*x828*x834))+(((-1.0)*sj3*sj4*x838))+(((-1.0)*pz*x806*x823))+(((-0.11)*cj3*x837))+(((-0.104)*x820))+(((0.104)*x823))+((r00*x807))+(((-0.104)*x837))+((cj0*py*x817))+(((-1.0)*r02*x806*x814)));
evalcond[5]=(((r00*sj1*x816))+((cj0*r02*x807))+(((0.0325)*x820))+((cj3*sj4*x838))+((sj4*x840))+(((-1.0)*pz*x823*x828))+(((-1.0)*py*r00*x806))+(((-0.0325)*x823))+(((-1.0)*x811*x814))+(((-0.11)*sj3*x837))+((cj1*x834)));
evalcond[6]=((((-1.0)*r02*x826))+(((-1.0)*x805*x808*x828))+((sj1*x804*x808))+(((-1.0)*x803*x810*x828))+((x818*x830))+((x801*x821))+((x811*x812*x813))+(((-1.0)*x808*x822))+((x808*x835))+((x808*x831))+(((-0.001284)*x802*x833))+(((-0.00676)*x811))+(((0.022916)*x801*x809))+((x813*x818))+(((-1.0)*x810*x822))+((px*x812*x815))+(((-1.0)*x803*x808*x828))+((r02*sj0*x807*x812))+((cj1*x812*x824))+(((-0.208)*x824))+(((-0.208)*x827))+((sj1*x805*x810))+((x810*x831))+((x810*x835))+(((2.0)*r01*x807*x813))+(((-1.0)*x804*x810*x828))+(((-1.0)*r02*x804*x806))+(((-1.0)*r02*x805*x806))+(((2.0)*r00*x807*x814))+((x803*x817))+(((0.00975975)*x817)));
evalcond[7]=((((-1.0)*sj1*x812*x827))+(((-0.022916)*x802*x809))+(((-1.0)*x803*x806*x808))+(((-1.0)*x810*x832))+(((-0.001284)*x801*x833))+((cj1*x805*x810))+(((-1.0)*pz*x818))+(((-1.0)*x813*x829))+((x812*x813*x817))+(((-1.0)*x808*x832))+(((-0.065)*x827))+(((-0.065)*x824))+(((-1.0)*x805*x806*x808))+(((-1.0)*x802*x821))+((x810*x825))+((x810*x826))+(((-1.0)*r01*x807*x812))+((x808*x826))+((x808*x825))+((x804*x811))+((x814*x815*x819))+((cj1*r01*x813*x819))+(((-1.0)*x803*x811))+(((0.00676)*x817))+((x805*x811))+(((-1.0)*x804*x806*x810))+((cj1*x804*x808))+(((-1.0)*x803*x806*x810))+((x812*x817*x830))+(((-1.0)*x829*x830))+(((0.00975975)*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x841=((125.0)*py);
IkReal x842=((4.0625)*cj1);
IkReal x843=(r01*sj0);
IkReal x844=(cj0*r00);
IkReal x845=((125.0)*px);
IkReal x846=((13.0)*sj1);
IkReal x847=((4.0625)*sj1);
IkReal x848=((13.0)*cj1);
IkReal x849=((125.0)*pz);
IkReal x850=(sj1*x844);
CheckValue<IkReal> x851=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x847))+(((-1.0)*r02*x849))+((r02*x848))+((x843*x846))+((x842*x843))+((x842*x844))+(((-1.0)*r01*x841))+(((-1.0)*r00*x845))+((x844*x846)))),IkReal(((((-13.75)*cj4))+(((-1.0)*r02*x842))+(((-1.0)*r02*x846))+((r02*sj0*x841))+((x843*x848))+(((-1.0)*x843*x849))+(((-1.0)*x843*x847))+(((-1.0)*x844*x847))+(((-1.0)*x844*x849))+((cj0*r02*x845))+((x844*x848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x851.value)))+(x852.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x853=IKcos(j3);
IkReal x854=px*px;
IkReal x855=pz*pz;
IkReal x856=py*py;
IkReal x857=(px*r01);
IkReal x858=(py*sj0);
IkReal x859=(r00*sj0);
IkReal x860=((0.065)*cj1);
IkReal x861=(r00*sj1);
IkReal x862=((0.0325)*cj0);
IkReal x863=(py*r00);
IkReal x864=((0.208)*sj1);
IkReal x865=((0.104)*r02);
IkReal x866=(r01*sj0);
IkReal x867=((1.0)*pz);
IkReal x868=((0.208)*py);
IkReal x869=(cj0*r01);
IkReal x870=((0.104)*cj1);
IkReal x871=(cj0*r00);
IkReal x872=(cj0*px);
IkReal x873=(cj0*py);
IkReal x874=((0.0325)*cj1);
IkReal x875=(px*sj0);
IkReal x876=((0.0325)*sj1);
IkReal x877=((0.104)*cj4);
IkReal x878=(cj1*r02);
IkReal x879=((0.065)*pz*sj1);
IkReal x880=((1.0)*x855);
IkReal x881=((0.208)*cj1*pz);
IkReal x882=((0.065)*r02*sj1);
IkReal x883=((0.02288)*x853);
IkReal x884=((1.0)*x856);
IkReal x885=((2.0)*pz*r02);
evalcond[0]=(((cj1*r00*x862))+(((-1.0)*px*r00))+(((0.104)*sj1*x866))+((x866*x874))+((cj1*x865))+(((-1.0)*x877*(IKsin(j3))))+(((-1.0)*r02*x876))+(((0.104)*cj0*x861))+(((-1.0)*r02*x867))+(((-1.0)*py*r01)));
evalcond[1]=((0.01104375)+(((-1.0)*x854))+(((-1.0)*x880))+(((-1.0)*x884))+((x858*x864))+((x858*x860))+((x860*x872))+((x864*x872))+x881+x883+(((-1.0)*x879)));
evalcond[2]=(((x870*x871))+(((-1.0)*x866*x876))+(((-0.11)*cj4))+(((-1.0)*x866*x867))+(((-1.0)*x853*x877))+(((-1.0)*x861*x862))+(((-1.0)*sj1*x865))+((x866*x870))+((r02*x872))+(((-1.0)*r02*x874))+((r02*x858))+(((-1.0)*x867*x871)));
evalcond[3]=(((sj4*x883))+(((-0.208)*x875*x878))+(((-1.0)*x873*x885))+(((-1.0)*x873*x882))+(((-1.0)*x859*x884))+(((-1.0)*x859*x880))+(((2.0)*x857*x858))+((x855*x869))+(((0.022916)*sj4))+(((-2.0)*x863*x872))+(((0.01187225)*x869))+((x854*x859))+((cj0*x868*x878))+((x861*x868))+((x869*x879))+((x860*x863))+((x875*x882))+((x875*x885))+(((-1.0)*x869*x884))+(((-1.0)*x869*x881))+((x859*x881))+(((-1.0)*x859*x879))+((x854*x869))+(((-0.01187225)*x859))+(((-1.0)*x857*x860))+(((-1.0)*x857*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=IKsign(cj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x886=(cj3*cj4);
j2eval[0]=((((1.05769230769231)*cj4))+x886);
j2eval[1]=IKsign(((((11.0)*cj4))+(((10.4)*x886))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x887=((1040.0)*cj1);
IkReal x888=(cj0*px);
IkReal x889=((1100.0)*sj3);
IkReal x890=(cj1*pz);
IkReal x891=((1040.0)*sj1);
IkReal x892=((1100.0)*cj3);
IkReal x893=((1040.0)*py*sj0);
IkReal x894=((1100.0)*pz*sj1);
IkReal x895=(py*sj0*sj1);
IkReal x896=(cj1*py*sj0);
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898 = IKatan2WithCheck(IkReal(((-108.16)+((pz*x887))+((sj1*x888*x892))+(((-1.0)*cj1*x888*x889))+((pz*sj1*x889))+(((-1.0)*x889*x896))+((x892*x895))+((x890*x892))+(((35.75)*sj3))+((py*sj0*x891))+((x888*x891))+(((-114.4)*cj3)))),IkReal(((-33.8)+((cj1*x888*x892))+((x887*x888))+(((-35.75)*cj3))+((sj1*x888*x889))+(((-1.0)*pz*x891))+(((-1.0)*pz*sj1*x892))+((x892*x896))+((x889*x890))+((x889*x895))+(((-114.4)*sj3))+((py*sj0*x887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x898.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x897.value)))+(x898.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x899=IKcos(j2);
IkReal x900=IKsin(j2);
IkReal x901=((1.0)*cj1);
IkReal x902=(py*sj1);
IkReal x903=(cj0*r02);
IkReal x904=(sj0*sj1);
IkReal x905=(pz*r00);
IkReal x906=((0.11)*cj3);
IkReal x907=(px*r02);
IkReal x908=(cj0*pz);
IkReal x909=(r00*sj0);
IkReal x910=((0.11)*sj3);
IkReal x911=(cj0*r01);
IkReal x912=(cj0*px);
IkReal x913=((0.104)*x900);
IkReal x914=((0.104)*x899);
IkReal x915=((1.0)*r01*sj1);
IkReal x916=(x900*x906);
IkReal x917=(x899*x910);
IkReal x918=(x899*x906);
IkReal x919=(x900*x910);
IkReal x920=(x918+x914);
IkReal x921=(x913+x917+x916);
evalcond[0]=((0.0325)+(((-1.0)*x919))+(((-1.0)*py*sj0*x901))+((pz*sj1))+x920+(((-1.0)*x901*x912)));
evalcond[1]=((0.104)+(((-1.0)*pz*x901))+(((-1.0)*sj0*x902))+(((-1.0)*sj1*x912))+x921);
evalcond[2]=((((-1.0)*x921))+((r00*x902))+(((-1.0)*sj0*x901*x907))+(((-1.0)*px*x915))+(((-1.0)*r01*x901*x908))+((cj1*sj0*x905))+(((0.104)*x911))+((cj1*py*x903))+(((-0.104)*x909)));
evalcond[3]=((((-1.0)*x908*x915))+(((-1.0)*py*r00*x901))+((x902*x903))+(((-1.0)*x919))+(((0.0325)*x909))+(((-1.0)*x904*x907))+(((-0.0325)*x911))+((cj1*px*r01))+x920+((x904*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((1.00157342657343)+cj3);
j2eval[1]=IKsign(((229.16)+(((228.8)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x922=((1040.0)*cj1);
IkReal x923=(cj0*px);
IkReal x924=((1100.0)*sj3);
IkReal x925=(cj1*pz);
IkReal x926=((1040.0)*sj1);
IkReal x927=((1100.0)*cj3);
IkReal x928=((1040.0)*py*sj0);
IkReal x929=((1100.0)*pz*sj1);
IkReal x930=(py*sj0*sj1);
IkReal x931=(cj1*py*sj0);
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((-108.16)+(((-1.0)*cj1*x923*x924))+((x927*x930))+(((-1.0)*x924*x931))+((pz*x922))+((x923*x926))+((x925*x927))+((sj1*x923*x927))+(((35.75)*sj3))+((pz*sj1*x924))+((py*sj0*x926))+(((-114.4)*cj3)))),IkReal(((-33.8)+(((-1.0)*pz*sj1*x927))+((cj1*x923*x927))+((x924*x930))+((x924*x925))+((x927*x931))+(((-35.75)*cj3))+(((-1.0)*pz*x926))+((x922*x923))+((sj1*x923*x924))+(((-114.4)*sj3))+((py*sj0*x922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(IKsign(((229.16)+(((228.8)*cj3)))),-1);
if(!x933.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x932.value)+(((1.5707963267949)*(x933.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x934=IKcos(j2);
IkReal x935=IKsin(j2);
IkReal x936=((1.0)*cj1);
IkReal x937=(py*sj1);
IkReal x938=(cj0*r02);
IkReal x939=(sj0*sj1);
IkReal x940=(pz*r00);
IkReal x941=((0.11)*cj3);
IkReal x942=(px*r02);
IkReal x943=(cj0*pz);
IkReal x944=(r00*sj0);
IkReal x945=((0.11)*sj3);
IkReal x946=(cj0*r01);
IkReal x947=(cj0*px);
IkReal x948=((0.104)*x935);
IkReal x949=((0.104)*x934);
IkReal x950=((1.0)*r01*sj1);
IkReal x951=(x935*x941);
IkReal x952=(x934*x945);
IkReal x953=(x935*x945);
IkReal x954=(x934*x941);
IkReal x955=(x954+x949);
IkReal x956=(x952+x951+x948);
evalcond[0]=((0.0325)+((pz*sj1))+(((-1.0)*x936*x947))+(((-1.0)*x953))+(((-1.0)*py*sj0*x936))+x955);
evalcond[1]=((0.104)+(((-1.0)*sj1*x947))+(((-1.0)*pz*x936))+(((-1.0)*sj0*x937))+x956);
evalcond[2]=((((-1.0)*r01*x936*x943))+(((-1.0)*sj0*x936*x942))+((cj1*py*x938))+(((-0.104)*x944))+(((0.104)*x946))+(((-1.0)*px*x950))+((cj1*sj0*x940))+((r00*x937))+x956);
evalcond[3]=(((x937*x938))+(((-0.0325)*x946))+(((-1.0)*x939*x942))+((x939*x940))+(((-1.0)*x943*x950))+(((0.0325)*x944))+(((-1.0)*x955))+((cj1*px*r01))+x953+(((-1.0)*py*r00*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x957=((4.67289719626168)*cj1);
IkReal x958=(py*sj0);
IkReal x959=(cj0*px);
IkReal x960=((4.67289719626168)*sj1);
if( IKabs(((-0.485981308411215)+((pz*x957))+((x959*x960))+((x958*x960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.151869158878505)+(((-1.0)*pz*x960))+((x957*x958))+((x957*x959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.485981308411215)+((pz*x957))+((x959*x960))+((x958*x960))))+IKsqr(((-0.151869158878505)+(((-1.0)*pz*x960))+((x957*x958))+((x957*x959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.485981308411215)+((pz*x957))+((x959*x960))+((x958*x960))), ((-0.151869158878505)+(((-1.0)*pz*x960))+((x957*x958))+((x957*x959))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x961=IKcos(j2);
IkReal x962=IKsin(j2);
IkReal x963=py*py;
IkReal x964=px*px;
IkReal x965=pz*pz;
IkReal x966=((1.0)*cj1);
IkReal x967=(py*sj1);
IkReal x968=(r01*sj0);
IkReal x969=(cj0*r00);
IkReal x970=(r02*sj1);
IkReal x971=((2.0)*pz);
IkReal x972=(cj0*px);
IkReal x973=(px*sj0);
IkReal x974=(cj1*r00);
IkReal x975=(pz*sj0);
IkReal x976=((0.065)*r02);
IkReal x977=((2.0)*py);
IkReal x978=(r00*sj0);
IkReal x979=((0.065)*pz);
IkReal x980=(cj0*r01);
IkReal x981=(py*r01);
IkReal x982=((0.00676)*sj1);
IkReal x983=(cj1*r02);
IkReal x984=((0.208)*pz);
IkReal x985=(px*r00);
IkReal x986=(py*sj0);
IkReal x987=((1.0)*sj1);
IkReal x988=((0.045796)*cj4);
IkReal x989=((0.00975975)*sj1);
IkReal x990=(px*r01);
IkReal x991=((0.00975975)*cj1);
IkReal x992=((0.00676)*cj1);
IkReal x993=((0.208)*r02);
IkReal x994=((0.214)*x962);
IkReal x995=((0.214)*x961);
evalcond[0]=((((-1.0)*x966*x968))+(((-1.0)*x966*x969))+(((-1.0)*cj4*x962))+x970);
evalcond[1]=((((-1.0)*x969*x987))+(((-1.0)*x968*x987))+((cj4*x961))+(((-1.0)*r02*x966)));
evalcond[2]=((0.0325)+(((-1.0)*x966*x972))+(((-1.0)*x966*x986))+((pz*sj1))+x995);
evalcond[3]=((0.104)+(((-1.0)*pz*x966))+(((-1.0)*x972*x987))+(((-1.0)*sj0*x967))+x994);
evalcond[4]=((((0.104)*x980))+(((-1.0)*pz*x966*x980))+(((-0.104)*x978))+((r00*x967))+(((-1.0)*sj4*x994))+((cj0*py*x983))+(((-1.0)*r02*x966*x973))+((x974*x975))+(((-1.0)*x987*x990)));
evalcond[5]=((((-0.0325)*x980))+((sj4*x995))+(((-1.0)*py*r00*x966))+(((0.0325)*x978))+(((-1.0)*pz*x980*x987))+((cj1*x990))+((cj0*r02*x967))+((r00*sj1*x975))+(((-1.0)*x970*x973)));
evalcond[6]=(((cj1*x963*x968))+((cj1*r01*x972*x977))+(((-1.0)*x968*x991))+((x971*x983*x986))+(((-1.0)*pz*x976))+(((-1.0)*x962*x988))+(((-1.0)*x969*x991))+(((-0.065)*x985))+(((-0.065)*x981))+(((0.00975975)*x970))+((x963*x970))+((x971*x972*x983))+((x968*x984))+((x968*x982))+(((0.00676)*x983))+(((-1.0)*sj1*x971*x985))+(((-1.0)*x972*x993))+(((-1.0)*x964*x966*x968))+((x964*x970))+((x973*x974*x977))+(((-1.0)*x963*x966*x969))+((cj1*x964*x969))+(((-1.0)*x986*x993))+(((-1.0)*r01*x967*x971))+(((-1.0)*x965*x970))+(((-1.0)*x965*x966*x969))+(((-1.0)*x965*x966*x968))+((x969*x982))+((x969*x984)));
evalcond[7]=(((cj1*x971*x981))+((x961*x988))+((sj1*x963*x968))+((px*x971*x974))+(((-1.0)*x969*x979))+((x968*x992))+((x970*x971*x972))+(((-1.0)*x963*x969*x987))+((x976*x986))+((x965*x983))+(((-0.00676)*x970))+(((2.0)*r01*x967*x972))+((x968*x989))+(((0.00975975)*x983))+(((-1.0)*r02*x963*x966))+(((-1.0)*r02*x964*x966))+(((-1.0)*x964*x968*x987))+((x969*x992))+(((-1.0)*x965*x968*x987))+(((-1.0)*x965*x969*x987))+(((2.0)*r00*x967*x973))+(((-1.0)*r02*x984))+((r02*sj0*x967*x971))+(((-1.0)*x968*x979))+((sj1*x964*x969))+((x972*x976))+(((-0.208)*x981))+(((-0.208)*x985))+((x969*x989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x996=((166.666666666667)*pz);
IkReal x997=((166.666666666667)*cj1);
IkReal x998=(py*sj0);
IkReal x999=(cj0*px);
IkReal x1000=((166.666666666667)*sj1);
if( IKabs(((17.3333333333333)+(((-1.0)*x1000*x999))+(((-1.0)*x1000*x998))+(((-1.0)*cj1*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.41666666666667)+(((-1.0)*x997*x999))+(((-1.0)*x997*x998))+((sj1*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.3333333333333)+(((-1.0)*x1000*x999))+(((-1.0)*x1000*x998))+(((-1.0)*cj1*x996))))+IKsqr(((5.41666666666667)+(((-1.0)*x997*x999))+(((-1.0)*x997*x998))+((sj1*x996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((17.3333333333333)+(((-1.0)*x1000*x999))+(((-1.0)*x1000*x998))+(((-1.0)*cj1*x996))), ((5.41666666666667)+(((-1.0)*x997*x999))+(((-1.0)*x997*x998))+((sj1*x996))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1001=IKcos(j2);
IkReal x1002=IKsin(j2);
IkReal x1003=py*py;
IkReal x1004=px*px;
IkReal x1005=pz*pz;
IkReal x1006=((1.0)*cj1);
IkReal x1007=(py*sj1);
IkReal x1008=(r01*sj0);
IkReal x1009=(cj0*r00);
IkReal x1010=(r02*sj1);
IkReal x1011=((2.0)*pz);
IkReal x1012=(cj0*px);
IkReal x1013=(px*sj0);
IkReal x1014=(cj1*r00);
IkReal x1015=(pz*sj0);
IkReal x1016=((0.065)*r02);
IkReal x1017=((2.0)*py);
IkReal x1018=(r00*sj0);
IkReal x1019=((0.065)*pz);
IkReal x1020=(cj0*r01);
IkReal x1021=(py*r01);
IkReal x1022=((0.00676)*sj1);
IkReal x1023=(cj1*r02);
IkReal x1024=((0.208)*pz);
IkReal x1025=(px*r00);
IkReal x1026=(py*sj0);
IkReal x1027=((1.0)*sj1);
IkReal x1028=((0.00975975)*sj1);
IkReal x1029=(px*r01);
IkReal x1030=((0.00975975)*cj1);
IkReal x1031=((0.00676)*cj1);
IkReal x1032=((0.208)*r02);
IkReal x1033=(cj4*x1001);
IkReal x1034=((0.006)*x1002);
IkReal x1035=((0.006)*x1001);
IkReal x1036=(cj4*x1002);
evalcond[0]=(x1010+x1036+(((-1.0)*x1006*x1008))+(((-1.0)*x1006*x1009)));
evalcond[1]=((0.0325)+(((-1.0)*x1035))+(((-1.0)*x1006*x1012))+((pz*sj1))+(((-1.0)*x1006*x1026)));
evalcond[2]=((((-1.0)*x1033))+(((-1.0)*r02*x1006))+(((-1.0)*x1009*x1027))+(((-1.0)*x1008*x1027)));
evalcond[3]=((0.104)+(((-1.0)*sj0*x1007))+(((-1.0)*x1034))+(((-1.0)*pz*x1006))+(((-1.0)*x1012*x1027)));
evalcond[4]=(((x1014*x1015))+((sj4*x1034))+((cj0*py*x1023))+(((0.104)*x1020))+(((-0.104)*x1018))+(((-1.0)*pz*x1006*x1020))+(((-1.0)*x1027*x1029))+(((-1.0)*r02*x1006*x1013))+((r00*x1007)));
evalcond[5]=((((-1.0)*x1010*x1013))+(((-1.0)*py*r00*x1006))+((cj0*r02*x1007))+((r00*sj1*x1015))+(((0.0325)*x1018))+(((-1.0)*pz*x1020*x1027))+(((-1.0)*sj4*x1035))+((cj1*x1029))+(((-0.0325)*x1020)));
evalcond[6]=(((x1008*x1024))+((x1008*x1022))+((x1009*x1024))+((x1009*x1022))+((x1003*x1010))+((x1011*x1023*x1026))+(((-1.0)*sj1*x1011*x1025))+((cj1*x1004*x1009))+(((3.6e-5)*x1036))+(((-1.0)*x1026*x1032))+(((-1.0)*x1008*x1030))+((x1013*x1014*x1017))+(((-1.0)*pz*x1016))+(((0.00975975)*x1010))+(((-1.0)*x1005*x1010))+(((-1.0)*x1009*x1030))+((cj1*r01*x1012*x1017))+(((0.00676)*x1023))+((x1004*x1010))+(((-1.0)*x1003*x1006*x1009))+(((-1.0)*r01*x1007*x1011))+(((-1.0)*x1005*x1006*x1009))+(((-1.0)*x1005*x1006*x1008))+(((-1.0)*x1012*x1032))+((x1011*x1012*x1023))+((cj1*x1003*x1008))+(((-0.065)*x1021))+(((-0.065)*x1025))+(((-1.0)*x1004*x1006*x1008)));
evalcond[7]=(((x1009*x1031))+(((2.0)*r00*x1007*x1013))+(((2.0)*r01*x1007*x1012))+((x1008*x1028))+((x1009*x1028))+(((-1.0)*x1005*x1009*x1027))+(((-1.0)*x1009*x1019))+((x1010*x1011*x1012))+((r02*sj0*x1007*x1011))+(((-1.0)*x1005*x1008*x1027))+(((0.00975975)*x1023))+(((-1.0)*x1003*x1009*x1027))+(((-1.0)*x1008*x1019))+(((-1.0)*r02*x1003*x1006))+((sj1*x1004*x1009))+((x1012*x1016))+(((-0.208)*x1025))+(((-0.208)*x1021))+(((-0.00676)*x1010))+(((-1.0)*r02*x1024))+((sj1*x1003*x1008))+((x1005*x1023))+(((-1.0)*x1004*x1008*x1027))+(((-3.6e-5)*x1033))+((cj1*x1011*x1021))+(((-1.0)*r02*x1004*x1006))+((x1016*x1026))+((px*x1011*x1014))+((x1008*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(cj4,-1);
if(!x1048.valid){
continue;
}
IkReal x1037=x1048.value;
IkReal x1038=((100.0)*cj4);
IkReal x1039=(pz*sj1);
IkReal x1040=(cj1*r02);
IkReal x1041=((3.25)*cj4);
IkReal x1042=((10.4)*sj1);
IkReal x1043=(cj1*py*sj0);
IkReal x1044=((-0.0961538461538462)*x1037);
IkReal x1045=(cj0*cj1*px);
IkReal x1046=((11.0)*cj0*r00*sj1);
IkReal x1047=((11.0)*r01*sj0*sj1);
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(sj3,-1);
if(!x1049.valid){
continue;
}
if( IKabs((x1044*(x1049.value)*(((((-1.0)*cj3*x1038*x1045))+(((-1.0)*cj3*x1038*x1043))+((r01*sj0*x1042))+((cj3*x1038*x1039))+(((10.4)*x1040))+((cj3*x1041))+((cj3*x1046))+((cj3*x1047))+((cj0*r00*x1042))+(((11.0)*cj3*x1040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1044*((((x1038*x1039))+x1041+x1047+x1046+(((-1.0)*x1038*x1045))+(((-1.0)*x1038*x1043))+(((11.0)*x1040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1044*(x1049.value)*(((((-1.0)*cj3*x1038*x1045))+(((-1.0)*cj3*x1038*x1043))+((r01*sj0*x1042))+((cj3*x1038*x1039))+(((10.4)*x1040))+((cj3*x1041))+((cj3*x1046))+((cj3*x1047))+((cj0*r00*x1042))+(((11.0)*cj3*x1040))))))+IKsqr((x1044*((((x1038*x1039))+x1041+x1047+x1046+(((-1.0)*x1038*x1045))+(((-1.0)*x1038*x1043))+(((11.0)*x1040))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1044*(x1049.value)*(((((-1.0)*cj3*x1038*x1045))+(((-1.0)*cj3*x1038*x1043))+((r01*sj0*x1042))+((cj3*x1038*x1039))+(((10.4)*x1040))+((cj3*x1041))+((cj3*x1046))+((cj3*x1047))+((cj0*r00*x1042))+(((11.0)*cj3*x1040))))), (x1044*((((x1038*x1039))+x1041+x1047+x1046+(((-1.0)*x1038*x1045))+(((-1.0)*x1038*x1043))+(((11.0)*x1040))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1050=IKcos(j2);
IkReal x1051=IKsin(j2);
IkReal x1052=pz*pz;
IkReal x1053=py*py;
IkReal x1054=px*px;
IkReal x1055=((1.0)*cj1);
IkReal x1056=(py*sj1);
IkReal x1057=(r01*sj0);
IkReal x1058=(cj3*cj4);
IkReal x1059=(cj0*r00);
IkReal x1060=(r02*sj1);
IkReal x1061=((2.0)*pz);
IkReal x1062=(cj0*px);
IkReal x1063=(px*sj0);
IkReal x1064=(cj1*r00);
IkReal x1065=(pz*sj0);
IkReal x1066=(cj1*r02);
IkReal x1067=((0.065)*r02);
IkReal x1068=((2.0)*py);
IkReal x1069=(r00*sj0);
IkReal x1070=((0.02288)*cj4);
IkReal x1071=((0.065)*pz);
IkReal x1072=(cj0*r01);
IkReal x1073=(py*r01);
IkReal x1074=((0.00676)*sj1);
IkReal x1075=((0.208)*pz);
IkReal x1076=(px*r00);
IkReal x1077=((1.0)*sj1);
IkReal x1078=((0.208)*r02);
IkReal x1079=(py*sj0);
IkReal x1080=((0.00975975)*sj1);
IkReal x1081=((0.00975975)*cj1);
IkReal x1082=(cj4*sj3);
IkReal x1083=(px*r01);
IkReal x1084=((0.00676)*cj1);
IkReal x1085=((1.0)*x1051);
IkReal x1086=(sj4*x1051);
IkReal x1087=((0.11)*x1050);
IkReal x1088=((0.11)*x1051);
IkReal x1089=((0.104)*x1050);
evalcond[0]=(x1060+(((-1.0)*x1058*x1085))+(((-1.0)*x1055*x1059))+(((-1.0)*x1055*x1057))+(((-1.0)*x1050*x1082)));
evalcond[1]=((((-1.0)*r02*x1055))+(((-1.0)*x1059*x1077))+((x1050*x1058))+(((-1.0)*x1057*x1077))+(((-1.0)*x1082*x1085)));
evalcond[2]=((0.0325)+(((-1.0)*sj3*x1088))+x1089+(((-1.0)*x1055*x1062))+(((-1.0)*x1055*x1079))+((cj3*x1087))+((pz*sj1)));
evalcond[3]=((0.104)+(((0.104)*x1051))+((sj3*x1087))+(((-1.0)*sj0*x1056))+(((-1.0)*x1062*x1077))+(((-1.0)*pz*x1055))+((cj3*x1088)));
evalcond[4]=((((0.104)*x1072))+(((-1.0)*pz*x1055*x1072))+(((-0.104)*x1086))+(((-0.11)*cj3*x1086))+(((-0.104)*x1069))+(((-1.0)*sj3*sj4*x1087))+((r00*x1056))+(((-1.0)*x1077*x1083))+(((-1.0)*r02*x1055*x1063))+((cj0*py*x1066))+((x1064*x1065)));
evalcond[5]=((((-0.11)*sj3*x1086))+(((-1.0)*py*r00*x1055))+(((-1.0)*x1060*x1063))+((cj1*x1083))+((cj0*r02*x1056))+((r00*sj1*x1065))+(((-0.0325)*x1072))+(((-1.0)*pz*x1072*x1077))+((cj3*sj4*x1087))+((sj4*x1089))+(((0.0325)*x1069)));
evalcond[6]=((((-1.0)*x1052*x1059*x1077))+(((2.0)*r00*x1056*x1063))+(((-0.208)*x1073))+(((-0.208)*x1076))+(((0.022916)*x1050*x1058))+((r02*sj0*x1056*x1061))+(((-1.0)*r02*x1075))+(((2.0)*r01*x1056*x1062))+((sj1*x1053*x1057))+(((-1.0)*x1059*x1071))+((x1067*x1079))+(((-1.0)*x1052*x1057*x1077))+(((-1.0)*x1054*x1057*x1077))+((cj1*x1061*x1073))+((x1060*x1061*x1062))+(((-1.0)*r02*x1053*x1055))+(((-1.0)*x1053*x1059*x1077))+((px*x1061*x1064))+((sj1*x1054*x1059))+((x1057*x1080))+((x1057*x1084))+(((-0.00676)*x1060))+((x1050*x1070))+((x1062*x1067))+(((-1.0)*x1057*x1071))+((x1052*x1066))+((x1059*x1080))+((x1059*x1084))+(((0.00975975)*x1066))+(((-1.0)*r02*x1054*x1055))+(((-0.001284)*x1051*x1082)));
evalcond[7]=((((-1.0)*x1078*x1079))+(((-1.0)*r01*x1056*x1061))+((x1054*x1060))+((cj1*x1053*x1057))+(((-1.0)*sj1*x1061*x1076))+(((0.00676)*x1066))+(((-0.022916)*x1051*x1058))+(((-1.0)*x1062*x1078))+(((-0.065)*x1073))+(((-0.065)*x1076))+((cj1*r01*x1062*x1068))+((x1057*x1074))+((x1057*x1075))+(((-1.0)*x1059*x1081))+(((-1.0)*pz*x1067))+(((-0.001284)*x1050*x1082))+((x1053*x1060))+(((-1.0)*x1052*x1055*x1057))+(((-1.0)*x1052*x1055*x1059))+(((-1.0)*x1054*x1055*x1057))+((x1061*x1062*x1066))+((x1063*x1064*x1068))+((x1061*x1066*x1079))+(((-1.0)*x1053*x1055*x1059))+((cj1*x1054*x1059))+(((-1.0)*x1057*x1081))+(((0.00975975)*x1060))+(((-1.0)*x1052*x1060))+(((-1.0)*x1051*x1070))+((x1059*x1074))+((x1059*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1090=(cj1*sj3);
IkReal x1091=((100.0)*cj4);
IkReal x1092=(py*sj0);
IkReal x1093=(cj0*r00);
IkReal x1094=((10.4)*cj1);
IkReal x1095=(cj3*cj4);
IkReal x1096=(cj0*px);
IkReal x1097=(r01*sj0);
IkReal x1098=(cj1*cj3);
IkReal x1099=(pz*sj1);
IkReal x1100=((11.0)*r02*sj1);
CheckValue<IkReal> x1101=IKPowWithIntegerCheck(IKsign(((((11.0)*cj4))+(((10.4)*x1095)))),-1);
if(!x1101.valid){
continue;
}
CheckValue<IkReal> x1102 = IKatan2WithCheck(IkReal(((((3.25)*cj4*sj3))+(((10.4)*r02*sj1))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094))+(((-11.0)*x1093*x1098))+((cj3*x1100))+((sj3*x1091*x1099))+(((-1.0)*x1090*x1091*x1092))+(((-1.0)*x1090*x1091*x1096))+(((-11.0)*x1097*x1098)))),IkReal((((sj3*x1100))+(((-11.0)*x1090*x1093))+(((-11.0)*x1090*x1097))+((x1091*x1092*x1098))+((x1091*x1096*x1098))+(((-3.25)*x1095))+(((-1.0)*cj3*x1091*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1102.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1101.value)))+(x1102.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1103=IKcos(j2);
IkReal x1104=IKsin(j2);
IkReal x1105=pz*pz;
IkReal x1106=py*py;
IkReal x1107=px*px;
IkReal x1108=((1.0)*cj1);
IkReal x1109=(py*sj1);
IkReal x1110=(r01*sj0);
IkReal x1111=(cj3*cj4);
IkReal x1112=(cj0*r00);
IkReal x1113=(r02*sj1);
IkReal x1114=((2.0)*pz);
IkReal x1115=(cj0*px);
IkReal x1116=(px*sj0);
IkReal x1117=(cj1*r00);
IkReal x1118=(pz*sj0);
IkReal x1119=(cj1*r02);
IkReal x1120=((0.065)*r02);
IkReal x1121=((2.0)*py);
IkReal x1122=(r00*sj0);
IkReal x1123=((0.02288)*cj4);
IkReal x1124=((0.065)*pz);
IkReal x1125=(cj0*r01);
IkReal x1126=(py*r01);
IkReal x1127=((0.00676)*sj1);
IkReal x1128=((0.208)*pz);
IkReal x1129=(px*r00);
IkReal x1130=((1.0)*sj1);
IkReal x1131=((0.208)*r02);
IkReal x1132=(py*sj0);
IkReal x1133=((0.00975975)*sj1);
IkReal x1134=((0.00975975)*cj1);
IkReal x1135=(cj4*sj3);
IkReal x1136=(px*r01);
IkReal x1137=((0.00676)*cj1);
IkReal x1138=((1.0)*x1104);
IkReal x1139=(sj4*x1104);
IkReal x1140=((0.11)*x1103);
IkReal x1141=((0.11)*x1104);
IkReal x1142=((0.104)*x1103);
evalcond[0]=(x1113+(((-1.0)*x1108*x1112))+(((-1.0)*x1108*x1110))+(((-1.0)*x1111*x1138))+(((-1.0)*x1103*x1135)));
evalcond[1]=((((-1.0)*x1112*x1130))+(((-1.0)*x1110*x1130))+(((-1.0)*r02*x1108))+(((-1.0)*x1135*x1138))+((x1103*x1111)));
evalcond[2]=((0.0325)+x1142+((cj3*x1140))+(((-1.0)*x1108*x1115))+(((-1.0)*x1108*x1132))+((pz*sj1))+(((-1.0)*sj3*x1141)));
evalcond[3]=((0.104)+(((-1.0)*sj0*x1109))+(((0.104)*x1104))+((cj3*x1141))+((sj3*x1140))+(((-1.0)*pz*x1108))+(((-1.0)*x1115*x1130)));
evalcond[4]=((((-1.0)*x1130*x1136))+((r00*x1109))+(((-1.0)*sj3*sj4*x1140))+((x1117*x1118))+(((-1.0)*pz*x1108*x1125))+(((-0.104)*x1122))+(((-1.0)*r02*x1108*x1116))+(((-0.104)*x1139))+((cj0*py*x1119))+(((-0.11)*cj3*x1139))+(((0.104)*x1125)));
evalcond[5]=(((sj4*x1142))+(((-1.0)*x1113*x1116))+(((-1.0)*py*r00*x1108))+(((-0.11)*sj3*x1139))+((r00*sj1*x1118))+(((-0.0325)*x1125))+((cj0*r02*x1109))+((cj3*sj4*x1140))+((cj1*x1136))+(((-1.0)*pz*x1125*x1130))+(((0.0325)*x1122)));
evalcond[6]=(((cj1*x1114*x1126))+(((-1.0)*x1105*x1112*x1130))+(((-1.0)*x1107*x1110*x1130))+(((-1.0)*x1112*x1124))+(((2.0)*r00*x1109*x1116))+(((-0.208)*x1126))+(((-0.208)*x1129))+((x1105*x1119))+(((2.0)*r01*x1109*x1115))+((x1120*x1132))+(((0.00975975)*x1119))+(((-1.0)*r02*x1106*x1108))+((sj1*x1106*x1110))+(((-1.0)*x1106*x1112*x1130))+((x1112*x1137))+((x1112*x1133))+((x1110*x1137))+((x1110*x1133))+((r02*sj0*x1109*x1114))+(((-1.0)*r02*x1107*x1108))+((x1103*x1123))+((x1113*x1114*x1115))+(((-1.0)*x1105*x1110*x1130))+(((0.022916)*x1103*x1111))+(((-0.00676)*x1113))+(((-1.0)*x1110*x1124))+(((-0.001284)*x1104*x1135))+((sj1*x1107*x1112))+(((-1.0)*r02*x1128))+((px*x1114*x1117))+((x1115*x1120)));
evalcond[7]=((((-0.022916)*x1104*x1111))+(((0.00676)*x1119))+(((-1.0)*x1112*x1134))+(((-1.0)*x1131*x1132))+((x1116*x1117*x1121))+(((0.00975975)*x1113))+((x1110*x1128))+((x1110*x1127))+((cj1*x1106*x1110))+(((-0.065)*x1129))+(((-0.065)*x1126))+((x1112*x1127))+((x1112*x1128))+(((-1.0)*pz*x1120))+((cj1*x1107*x1112))+((x1114*x1115*x1119))+(((-1.0)*x1104*x1123))+(((-1.0)*x1105*x1108*x1112))+(((-1.0)*x1105*x1108*x1110))+(((-1.0)*x1110*x1134))+(((-1.0)*x1105*x1113))+(((-1.0)*x1107*x1108*x1110))+(((-1.0)*x1106*x1108*x1112))+(((-0.001284)*x1103*x1135))+(((-1.0)*x1115*x1131))+((cj1*r01*x1115*x1121))+(((-1.0)*r01*x1109*x1114))+(((-1.0)*sj1*x1114*x1129))+((x1107*x1113))+((x1114*x1119*x1132))+((x1106*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1143=((1.0)*cj1);
IkReal x1144=(cj0*r00);
IkReal x1145=(r02*sj1);
IkReal x1146=((1.0)*sj1);
IkReal x1147=(cj3*r01*sj0);
IkReal x1148=(r01*sj0*sj3);
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1149.valid){
continue;
}
CheckValue<IkReal> x1150 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1143*x1144))+(((-1.0)*x1143*x1147))+((cj3*x1145))+(((-1.0)*x1146*x1148))+(((-1.0)*r02*sj3*x1143))+(((-1.0)*sj3*x1144*x1146)))),IkReal(((((-1.0)*sj3*x1143*x1144))+(((-1.0)*x1143*x1148))+((sj3*x1145))+((cj3*sj1*x1144))+((sj1*x1147))+((cj1*cj3*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1150.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1149.value)))+(x1150.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1151=IKcos(j2);
IkReal x1152=IKsin(j2);
IkReal x1153=pz*pz;
IkReal x1154=py*py;
IkReal x1155=px*px;
IkReal x1156=((1.0)*cj1);
IkReal x1157=(py*sj1);
IkReal x1158=(r01*sj0);
IkReal x1159=(cj3*cj4);
IkReal x1160=(cj0*r00);
IkReal x1161=(r02*sj1);
IkReal x1162=((2.0)*pz);
IkReal x1163=(cj0*px);
IkReal x1164=(px*sj0);
IkReal x1165=(cj1*r00);
IkReal x1166=(pz*sj0);
IkReal x1167=(cj1*r02);
IkReal x1168=((0.065)*r02);
IkReal x1169=((2.0)*py);
IkReal x1170=(r00*sj0);
IkReal x1171=((0.02288)*cj4);
IkReal x1172=((0.065)*pz);
IkReal x1173=(cj0*r01);
IkReal x1174=(py*r01);
IkReal x1175=((0.00676)*sj1);
IkReal x1176=((0.208)*pz);
IkReal x1177=(px*r00);
IkReal x1178=((1.0)*sj1);
IkReal x1179=((0.208)*r02);
IkReal x1180=(py*sj0);
IkReal x1181=((0.00975975)*sj1);
IkReal x1182=((0.00975975)*cj1);
IkReal x1183=(cj4*sj3);
IkReal x1184=(px*r01);
IkReal x1185=((0.00676)*cj1);
IkReal x1186=((1.0)*x1152);
IkReal x1187=(sj4*x1152);
IkReal x1188=((0.11)*x1151);
IkReal x1189=((0.11)*x1152);
IkReal x1190=((0.104)*x1151);
evalcond[0]=((((-1.0)*x1156*x1160))+x1161+(((-1.0)*x1156*x1158))+(((-1.0)*x1151*x1183))+(((-1.0)*x1159*x1186)));
evalcond[1]=((((-1.0)*x1158*x1178))+(((-1.0)*r02*x1156))+((x1151*x1159))+(((-1.0)*x1183*x1186))+(((-1.0)*x1160*x1178)));
evalcond[2]=((0.0325)+(((-1.0)*x1156*x1163))+x1190+(((-1.0)*x1156*x1180))+((pz*sj1))+((cj3*x1188))+(((-1.0)*sj3*x1189)));
evalcond[3]=((0.104)+(((0.104)*x1152))+(((-1.0)*x1163*x1178))+((sj3*x1188))+(((-1.0)*pz*x1156))+((cj3*x1189))+(((-1.0)*sj0*x1157)));
evalcond[4]=(((r00*x1157))+(((-1.0)*r02*x1156*x1164))+(((-0.104)*x1170))+(((-0.11)*cj3*x1187))+((x1165*x1166))+(((-1.0)*pz*x1156*x1173))+(((-1.0)*x1178*x1184))+((cj0*py*x1167))+(((-1.0)*sj3*sj4*x1188))+(((-0.104)*x1187))+(((0.104)*x1173)));
evalcond[5]=(((sj4*x1190))+(((-1.0)*py*r00*x1156))+(((-0.11)*sj3*x1187))+((r00*sj1*x1166))+((cj0*r02*x1157))+((cj3*sj4*x1188))+(((-1.0)*x1161*x1164))+(((0.0325)*x1170))+(((-1.0)*pz*x1173*x1178))+((cj1*x1184))+(((-0.0325)*x1173)));
evalcond[6]=((((-1.0)*r02*x1176))+(((-0.208)*x1177))+(((-0.208)*x1174))+(((-1.0)*x1158*x1172))+((x1153*x1167))+(((-0.001284)*x1152*x1183))+((x1163*x1168))+(((-1.0)*x1154*x1160*x1178))+(((2.0)*r01*x1157*x1163))+(((-1.0)*r02*x1154*x1156))+((x1161*x1162*x1163))+(((-1.0)*x1153*x1160*x1178))+(((-1.0)*r02*x1155*x1156))+((sj1*x1154*x1158))+((cj1*x1162*x1174))+((x1158*x1185))+((x1158*x1181))+((r02*sj0*x1157*x1162))+(((-1.0)*x1153*x1158*x1178))+((x1160*x1181))+((x1160*x1185))+(((0.022916)*x1151*x1159))+((sj1*x1155*x1160))+(((-0.00676)*x1161))+(((2.0)*r00*x1157*x1164))+((px*x1162*x1165))+((x1168*x1180))+(((-1.0)*x1155*x1158*x1178))+(((0.00975975)*x1167))+(((-1.0)*x1160*x1172))+((x1151*x1171)));
evalcond[7]=(((cj1*r01*x1163*x1169))+(((-1.0)*x1158*x1182))+(((-1.0)*x1152*x1171))+(((-1.0)*r01*x1157*x1162))+((x1162*x1163*x1167))+((cj1*x1155*x1160))+(((-0.065)*x1177))+(((-0.065)*x1174))+(((0.00676)*x1167))+(((-1.0)*x1163*x1179))+(((-1.0)*x1153*x1161))+((x1155*x1161))+(((-1.0)*x1153*x1156*x1158))+(((-1.0)*pz*x1168))+(((-1.0)*x1179*x1180))+((x1154*x1161))+(((-1.0)*x1155*x1156*x1158))+((x1164*x1165*x1169))+(((-1.0)*x1153*x1156*x1160))+(((-0.022916)*x1152*x1159))+(((-1.0)*x1160*x1182))+((cj1*x1154*x1158))+((x1162*x1167*x1180))+(((-1.0)*x1154*x1156*x1160))+((x1158*x1175))+((x1158*x1176))+(((0.00975975)*x1161))+(((-1.0)*sj1*x1162*x1177))+((x1160*x1175))+((x1160*x1176))+(((-0.001284)*x1151*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - phantomx_pincher_arm (8b49e137585a136bea671325749be27d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
