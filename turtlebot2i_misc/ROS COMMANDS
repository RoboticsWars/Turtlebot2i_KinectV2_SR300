//Gazebo Simulation ( http://gazebosim.org/tutorials/?tut=ros_control )
{
	*Gazebo, arm joint controllers, empty turtlebot2i world:
	roslaunch turtlebot2i_gazebo turtlebot_world.launch

	*Arm Joint Controllers
	roslaunch turtlebot2i_control turtlebot2i_control.launch

	*Manually Command Arm
	rostopic pub -1 /turtlebot/arm_shoulder_pan_position_controller/command std_msgs/Float64 "data: 0.4"
	rostopic pub -1 /turtlebot/arm_elbow_flex_position_controller/command std_msgs/Float64 "data: 1.4"
}

//Bringup up the robot
{
	*To bring up the base, arm and sensors only:
	roslaunch turtlebot2i_bringup turtlebot2i_basic.launch

	*To bring up the full robot with mapping, arm pose manager, moveit and zone detection:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch
		No parameters: Mapping will resume using last ~/.ros/rtabmap.db
		Optional parameters:
			new_rtabmap:=true 	*Delete rtabmap.db on start
			localization:=true  *Use rtabmap for localization (existing map)
			rviz:=true			*Load RViz with launch (local/NUC)
			rtabmapviz:=true 	*Load RTAB-Map GUI with launch

}
//Turtlebot2i Demos
{ 
	*To resume mapping:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch

	*To start a new map:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch new_rtabmap:=true

	*To use existing map for localization purposes only:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch localization:=true

	*Drive around then when the markers have been identified you can publish a zone destination request:
	rostopic pub /zone_destination_request std_msgs/String "charging_zone"
	rostopic pub /zone_destination_request std_msgs/String "pickup_zone"
	rostopic pub /zone_destination_request std_msgs/String "sorting_zone"

	*To start auto docking near a base station run this launch file:
	roslaunch kobuki_auto_docking activate.launch

	*Robot monitoring and operations management:
	rqt
	menu [Perspectives] / [Import...] and import /rqt_perspectives/NewTest.perspective

	*To start the block sorting demo at a docking station:
	roslaunch turtlebot2i_block_manipulation block_sorting_demo.launch at_dock:=true

	*To start the block sorting demo (green on the right, others on the left) (sorting into bins expected to be about 77mm in height):
	roslaunch turtlebot2i_block_manipulation block_sorting_demo.launch
}

//Arm Tool Detection and Marker Handling (WIP)
//Expects Expo dry erase marker in 3D printed holder to be in view
//Works well on dry erase board with low friction
{
	*Bring up robot with arm and moveit:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch new_rtabmap:=true

	*Start tool detection and pick and draw action servers:
	roslaunch turtlebot2i_marker_manipulation marker_demo.launch
}

//Arm Block/2cm Object Sorting & Interactive Manipulation
//Blocks found in center view can be sorted by color (green/not-green)
//Blocks can be clicked and moved in RViz and will be repositioned by the robot
{
	*Bring up robot with arm and moveit:
	roslaunch turtlebot2i_bringup turtlebot2i_demo1.launch new_rtabmap:=true

	*Start block detection, interactive manipulation and pickandplace action servers:
	roslaunch turtlebot2i_block_manipulation block_sorting_demo.launch at_dock:=true/false auto_sort:=false/true
}

//Custom arm_pose_director (action server) with CLI example
//This simple action server moves the arm to a named pose typically found in the SRDF
{
	roslaunch turtlebot2i_arm_director demo.launch

	rostopic pub /named_pose_director/goal turtlebot2i_arm_director/NamedPoseDirectorActionGoal '{goal: { named_pose: "pose_parked"}}'
	rostopic pub /named_pose_director/goal turtlebot2i_arm_director/NamedPoseDirectorActionGoal '{goal: { named_pose: "pose_grasping"}}'
}

//Pincher Arm MoveIt! Demo
{
	*On robot
	roslaunch turtlebot2i_bringup turtlebot2i_basic.launch
	roslaunch turtlebot2i_moveit_config turtlebot_moveit.launch sim:=false

	*Off robot
	roslaunch phantomx_pincher_arm_bringup arm.launch
	roslaunch phantomx_pincher_arm_moveit_config phantomx_pincher_arm_moveit.launch sim:=false
}

//Remote view the robot
{
	export ROS_MASTER_URI=http://my.robot.address:11311
	roslaunch turtlebot2i_bringup remote_view.launch
}

Temp fix (if this happens to you) for: python cannot import structs error
see https://github.com/ros-planning/moveit/issues/86
{ 
	I still have this issue, with ros-kinetic-moveit installed and fully updated Ubuntu 16.04 system.
	It is fixed by doing the following:

	pip install --user pyassimp

	It requires pyassimp 3.3, installed by default is 3.2.
}